/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 923:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.addFocusExit = addFocusExit;
exports.removeFocusExit = removeFocusExit;
var _makeupNextId = _interopRequireDefault(__webpack_require__(937));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const focusExitEmitters = {};
function doFocusExit(el, fromElement, toElement) {
  el.dispatchEvent(new CustomEvent("focusExit", {
    detail: {
      fromElement,
      toElement
    },
    bubbles: false // mirror the native mouseleave event
  }));
}
function onDocumentFocusIn(e) {
  const newFocusElement = e.target;
  const targetIsDescendant = this.el.contains(newFocusElement);

  // if focus has moved to a focusable descendant
  if (targetIsDescendant === true) {
    // set the target as the currently focussed element
    this.currentFocusElement = newFocusElement;
  } else {
    // else focus has not gone to a focusable descendant
    window.removeEventListener("blur", this.onWindowBlurListener);
    document.removeEventListener("focusin", this.onDocumentFocusInListener);
    doFocusExit(this.el, this.currentFocusElement, newFocusElement);
    this.currentFocusElement = null;
  }
}
function onWindowBlur() {
  doFocusExit(this.el, this.currentFocusElement, undefined);
}
function onWidgetFocusIn() {
  // listen for focus moving to anywhere in document
  // note that mouse click on buttons, checkboxes and radios does not trigger focus events in all browsers!
  document.addEventListener("focusin", this.onDocumentFocusInListener);
  // listen for focus leaving the window
  window.addEventListener("blur", this.onWindowBlurListener);
}
class FocusExitEmitter {
  constructor(el) {
    this.el = el;
    this.currentFocusElement = null;
    this.onWidgetFocusInListener = onWidgetFocusIn.bind(this);
    this.onDocumentFocusInListener = onDocumentFocusIn.bind(this);
    this.onWindowBlurListener = onWindowBlur.bind(this);
    this.el.addEventListener("focusin", this.onWidgetFocusInListener);
  }
  removeEventListeners() {
    window.removeEventListener("blur", this.onWindowBlurListener);
    document.removeEventListener("focusin", this.onDocumentFocusInListener);
    this.el.removeEventListener("focusin", this.onWidgetFocusInListener);
  }
}
function addFocusExit(el) {
  let exitEmitter = null;
  (0, _makeupNextId.default)(el);
  if (!focusExitEmitters[el.id]) {
    exitEmitter = new FocusExitEmitter(el);
    focusExitEmitters[el.id] = exitEmitter;
  }
  return exitEmitter;
}
function removeFocusExit(el) {
  const exitEmitter = focusExitEmitters[el.id];
  if (exitEmitter) {
    exitEmitter.removeEventListeners();
    delete focusExitEmitters[el.id];
  }
}


/***/ }),

/***/ 550:
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.add = add;
exports.addKeyDown = addKeyDown;
exports.addKeyUp = addKeyUp;
exports.remove = remove;
exports.removeKeyDown = removeKeyDown;
exports.removeKeyUp = removeKeyUp;
function uncapitalizeFirstLetter(str) {
  return str.charAt(0).toLowerCase() + str.slice(1);
}
function onKeyDownOrUp(evt, el, keyEventType) {
  if (!evt.shiftKey) {
    const key = evt.key;
    switch (key) {
      case "Enter":
      case "Escape":
      case "PageUp":
      case "PageDown":
      case "End":
      case "Home":
      case "ArrowLeft":
      case "ArrowUp":
      case "ArrowRight":
      case "ArrowDown":
        el.dispatchEvent(new CustomEvent(uncapitalizeFirstLetter(`${key}Key${keyEventType}`), {
          detail: evt,
          bubbles: true
        }));
        break;
      case " ":
        el.dispatchEvent(new CustomEvent(`spacebarKey${keyEventType}`, {
          detail: evt,
          bubbles: true
        }));
        break;
      default:
        return;
    }
  }
}
function onKeyDown(e) {
  onKeyDownOrUp(e, this, "Down");
}
function onKeyUp(e) {
  onKeyDownOrUp(e, this, "Up");
}
function addKeyDown(el) {
  el.addEventListener("keydown", onKeyDown);
}
function addKeyUp(el) {
  el.addEventListener("keyup", onKeyUp);
}
function removeKeyDown(el) {
  el.removeEventListener("keydown", onKeyDown);
}
function removeKeyUp(el) {
  el.removeEventListener("keyup", onKeyUp);
}
function add(el) {
  addKeyDown(el);
  addKeyUp(el);
}
function remove(el) {
  removeKeyDown(el);
  removeKeyUp(el);
}


/***/ }),

/***/ 405:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createLinear = createLinear;
var KeyEmitter = _interopRequireWildcard(__webpack_require__(550));
var ExitEmitter = _interopRequireWildcard(__webpack_require__(923));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const defaultOptions = {
  axis: "both",
  autoInit: "interactive",
  autoReset: "current",
  ignoreByDelegateSelector: null,
  wrap: false
};
function isItemNavigable(el) {
  return !el.hidden && el.getAttribute("aria-disabled") !== "true";
}
function isIndexNavigable(items, index) {
  return index >= 0 && index < items.length ? isItemNavigable(items[index]) : false;
}
function findNavigableItems(items) {
  return items.filter(isItemNavigable);
}
function findFirstNavigableIndex(items) {
  return items.findIndex(item => isItemNavigable(item));
}
function findLastNavigableIndex(items) {
  // todo: at(-1) is more performant than reverse(), but Babel is not transpiling it
  return items.indexOf(findNavigableItems(items).reverse()[0]);
}
function findIndexByAttribute(items, attribute, value) {
  return items.findIndex(item => isItemNavigable(item) && item.getAttribute(attribute) === value);
}
function findFirstNavigableAriaCheckedIndex(items) {
  return findIndexByAttribute(items, "aria-checked", "true");
}
function findFirstNavigableAriaSelectedIndex(items) {
  return findIndexByAttribute(items, "aria-selected", "true");
}
function findIgnoredByDelegateItems(el, options) {
  return options.ignoreByDelegateSelector !== null ? [...el.querySelectorAll(options.ignoreByDelegateSelector)] : [];
}
function findPreviousNavigableIndex(items, index, wrap) {
  let previousNavigableIndex = -1;
  if (index === null || atStart(items, index)) {
    if (wrap === true) {
      previousNavigableIndex = findLastNavigableIndex(items);
    }
  } else {
    let i = index;
    while (--i >= 0) {
      if (isItemNavigable(items[i])) {
        previousNavigableIndex = i;
        break;
      }
    }
  }
  return previousNavigableIndex;
}
function findNextNavigableIndex(items, index, wrap) {
  let nextNavigableIndex = -1;
  if (index === null) {
    nextNavigableIndex = findFirstNavigableIndex(items);
  } else if (atEnd(items, index)) {
    if (wrap === true) {
      nextNavigableIndex = findFirstNavigableIndex(items);
    }
  } else {
    let i = index;
    while (++i < items.length) {
      if (isItemNavigable(items[i])) {
        nextNavigableIndex = i;
        break;
      }
    }
  }
  return nextNavigableIndex;
}

// returning -1 means not found
function findIndexPositionByType(typeOrNum, items, currentIndex) {
  let index = -1;
  switch (typeOrNum) {
    case "none":
      index = null;
      break;
    case "current":
      index = currentIndex;
      break;
    case "interactive":
      index = findFirstNavigableIndex(items);
      break;
    case "ariaChecked":
      index = findFirstNavigableAriaCheckedIndex(items);
      break;
    case "ariaSelected":
      index = findFirstNavigableAriaSelectedIndex(items);
      break;
    case "ariaSelectedOrInteractive":
      index = findFirstNavigableAriaSelectedIndex(items);
      index = index === -1 ? findFirstNavigableIndex(items) : index;
      break;
    default:
      index = typeof typeOrNum === "number" || typeOrNum === null ? typeOrNum : -1;
  }
  return index;
}
function atStart(items, index) {
  return index === findFirstNavigableIndex(items);
}
function atEnd(items, index) {
  return index === findLastNavigableIndex(items);
}
function onKeyPrev(e) {
  const ignoredByDelegateItems = findIgnoredByDelegateItems(this._el, this.options);

  // todo: update KeyEmitter to deal with ignored items?
  if (ignoredByDelegateItems.length === 0 || !ignoredByDelegateItems.includes(e.detail.target)) {
    this.index = findPreviousNavigableIndex(this.items, this.index, this.options.wrap);
  }
}
function onKeyNext(e) {
  const ignoredByDelegateItems = findIgnoredByDelegateItems(this._el, this.options);

  // todo: update KeyEmitter to deal with ignored items?
  if (ignoredByDelegateItems.length === 0 || !ignoredByDelegateItems.includes(e.detail.target)) {
    this.index = findNextNavigableIndex(this.items, this.index, this.options.wrap);
  }
}
function onClick(e) {
  const itemIndex = this.indexOf(e.target.closest(this._itemSelector));
  if (isIndexNavigable(this.items, itemIndex)) {
    this.index = itemIndex;
  }
}
function onKeyHome(e) {
  const ignoredByDelegateItems = findIgnoredByDelegateItems(this._el, this.options);

  // todo: update KeyEmitter to deal with ignored items?
  if (ignoredByDelegateItems.length === 0 || !ignoredByDelegateItems.includes(e.detail.target)) {
    this.index = findFirstNavigableIndex(this.items);
  }
}
function onKeyEnd(e) {
  const ignoredByDelegateItems = findIgnoredByDelegateItems(this._el, this.options);

  // todo: update KeyEmitter to deal with ignored items?
  if (ignoredByDelegateItems.length === 0 || !ignoredByDelegateItems.includes(e.detail.target)) {
    this.index = findLastNavigableIndex(this.items);
  }
}
function onFocusExit() {
  if (this.options.autoReset !== null) {
    this.reset();
  }
}
function onMutation(e) {
  const fromIndex = this.index;
  let toIndex = this.index;
  // https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord
  const {
    addedNodes,
    attributeName,
    removedNodes,
    target,
    type
  } = e[0];
  if (type === "attributes") {
    if (target === this.currentItem) {
      if (attributeName === "aria-disabled") {
        // current item was disabled - keep it as current index (until a keyboard navigation happens)
        toIndex = this.index;
      } else if (attributeName === "hidden") {
        // current item was hidden and focus is lost - reset index to first interactive element
        toIndex = findFirstNavigableIndex(this.items);
      }
    } else {
      toIndex = this.index;
    }
  } else if (type === "childList") {
    if (removedNodes.length > 0 && [...removedNodes].includes(this._cachedElement)) {
      // current item was removed and focus is lost - reset index to first interactive element
      toIndex = findFirstNavigableIndex(this.items);
    } else if (removedNodes.length > 0 || addedNodes.length > 0) {
      // nodes were added and/or removed - keep current item and resync its index
      toIndex = this.indexOf(this._cachedElement);
    }
  }
  this._index = toIndex;
  this._el.dispatchEvent(new CustomEvent("navigationModelMutation", {
    bubbles: false,
    detail: {
      fromIndex,
      toIndex
    }
  }));
}
class NavigationModel {
  /**
   * @param {HTMLElement} el
   * @param {string} itemSelector
   * @param {typeof defaultOptions} selectedOptions
   */
  constructor(el, itemSelector, selectedOptions) {
    /** @member {typeof defaultOptions} */
    this.options = Object.assign({}, defaultOptions, selectedOptions);

    /** @member {HTMLElement} */
    this._el = el;

    /** @member {string} */
    this._itemSelector = itemSelector;
  }
}
class LinearNavigationModel extends NavigationModel {
  /**
   * @param {HTMLElement} el
   * @param {string} itemSelector
   * @param {typeof defaultOptions} selectedOptions
   */
  constructor(el, itemSelector, selectedOptions) {
    super(el, itemSelector, selectedOptions);
    const fromIndex = this._index;
    const toIndex = findIndexPositionByType(this.options.autoInit, this.items, this.index);

    // do not use setter as it will trigger a change event
    this._index = toIndex;

    // always keep an element reference to the last item (for use in mutation observer)
    // todo: convert index to Tuple to store last/current values instead?
    this._cachedElement = this.items[toIndex];
    this._el.dispatchEvent(new CustomEvent("navigationModelInit", {
      bubbles: false,
      detail: {
        firstInteractiveIndex: this.firstNavigableIndex,
        fromIndex,
        items: this.items,
        toIndex
      }
    }));
  }
  get currentItem() {
    return this.items[this.index];
  }

  // todo: code smell as getter abstracts that the query selector re-runs every time getter is accessed
  get items() {
    return [...this._el.querySelectorAll(`${this._itemSelector}`)];
  }
  get index() {
    return this._index;
  }

  /**
   * @param {number} toIndex - update index position in this.items (non-interactive indexes fail silently)
   */
  set index(toIndex) {
    if (toIndex === this.index) {
      return;
    } else if (!isIndexNavigable(this.items, toIndex)) {
      // no-op. throw exception?
    } else {
      const fromIndex = this.index;
      // update cached element reference (for use in mutation observer if DOM node gets removed)
      this._cachedElement = this.items[toIndex];
      this._index = toIndex;
      this._el.dispatchEvent(new CustomEvent("navigationModelChange", {
        bubbles: false,
        detail: {
          fromIndex,
          toIndex
        }
      }));
    }
  }
  indexOf(element) {
    return this.items.indexOf(element);
  }
  reset() {
    const fromIndex = this.index;
    const toIndex = findIndexPositionByType(this.options.autoReset, this.items, this.index);
    if (toIndex !== fromIndex) {
      // do not use setter as it will trigger a navigationModelChange event
      this._index = toIndex;
      this._el.dispatchEvent(new CustomEvent("navigationModelReset", {
        bubbles: false,
        detail: {
          fromIndex,
          toIndex
        }
      }));
    }
  }
}

// 2D Grid Model will go here

/*
class GridModel extends NavigationModel {
    constructor(el, rowSelector, colSelector) {
        super();
        this._coords = null;
    }
}
*/

class NavigationEmitter {
  /**
   * @param {HTMLElement} el
   * @param {LinearNavigationModel} model
   */
  constructor(el, model) {
    this.model = model;
    this.el = el;
    this._keyPrevListener = onKeyPrev.bind(model);
    this._keyNextListener = onKeyNext.bind(model);
    this._keyHomeListener = onKeyHome.bind(model);
    this._keyEndListener = onKeyEnd.bind(model);
    this._clickListener = onClick.bind(model);
    this._focusExitListener = onFocusExit.bind(model);
    this._observer = new MutationObserver(onMutation.bind(model));
    KeyEmitter.addKeyDown(this.el);
    ExitEmitter.addFocusExit(this.el);
    const axis = model.options.axis;
    if (axis === "both" || axis === "x") {
      this.el.addEventListener("arrowLeftKeyDown", this._keyPrevListener);
      this.el.addEventListener("arrowRightKeyDown", this._keyNextListener);
    }
    if (axis === "both" || axis === "y") {
      this.el.addEventListener("arrowUpKeyDown", this._keyPrevListener);
      this.el.addEventListener("arrowDownKeyDown", this._keyNextListener);
    }
    this.el.addEventListener("homeKeyDown", this._keyHomeListener);
    this.el.addEventListener("endKeyDown", this._keyEndListener);
    this.el.addEventListener("click", this._clickListener);
    this.el.addEventListener("focusExit", this._focusExitListener);
    this._observer.observe(this.el, {
      childList: true,
      subtree: true,
      attributeFilter: ["aria-disabled", "hidden"],
      attributes: true,
      attributeOldValue: true
    });
  }
  destroy() {
    KeyEmitter.removeKeyDown(this.el);
    ExitEmitter.removeFocusExit(this.el);
    this.el.removeEventListener("arrowLeftKeyDown", this._keyPrevListener);
    this.el.removeEventListener("arrowRightKeyDown", this._keyNextListener);
    this.el.removeEventListener("arrowUpKeyDown", this._keyPrevListener);
    this.el.removeEventListener("arrowDownKeyDown", this._keyNextListener);
    this.el.removeEventListener("homeKeyDown", this._keyHomeListener);
    this.el.removeEventListener("endKeyDown", this._keyEndListener);
    this.el.removeEventListener("click", this._clickListener);
    this.el.removeEventListener("focusExit", this._focusExitListener);
    this._observer.disconnect();
  }
}
function createLinear(el, itemSelector, selectedOptions) {
  const model = new LinearNavigationModel(el, itemSelector, selectedOptions);
  return new NavigationEmitter(el, model);
}

/*
static createGrid(el, rowSelector, colSelector, selectedOptions) {
    return null;
}
*/


/***/ }),

/***/ 937:
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = _default;
const sequenceMap = {};
const defaultPrefix = "nid";
const randomPortion = createRandomPortion(3);
function randomNumber(max) {
  return Math.floor(Math.random() * max);
}
function createRandomPortion(size) {
  const letters = "abcdefghijklmnopqrstuvwxyz";
  const digits = "0123456789";
  const allChars = letters + digits;

  // to ensure a valid HTML ID (when prefix is empty), first character must be a letter
  let portion = letters[randomNumber(25)];

  // start iterating from 1, as we already have our first char
  for (let i = 1; i < size; i++) {
    portion += allChars[randomNumber(35)];
  }
  return portion;
}
function _default(el) {
  let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultPrefix;
  const separator = prefix === "" ? "" : "-";

  // join first prefix with random portion to create key
  const key = `${prefix}${separator}${randomPortion}`;

  // initialise key in sequence map if necessary
  sequenceMap[key] = sequenceMap[key] || 0;
  if (!el.id) {
    el.setAttribute("id", `${key}-${sequenceMap[key]++}`);
  }
  return el.id;
}


/***/ }),

/***/ 513:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createLinear = createLinear;
var NavigationEmitter = _interopRequireWildcard(__webpack_require__(405));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const defaultOptions = {
  autoInit: "interactive",
  autoReset: "current",
  wrap: false,
  axis: "both"
};
function refreshTabindex(items, focusIndex) {
  items.forEach(function (el, i) {
    el.setAttribute("tabindex", i === focusIndex ? "0" : "-1");
  });
}
function onModelInit(e) {
  refreshTabindex(e.detail.items, e.detail.toIndex);
  this._el.dispatchEvent(new CustomEvent("rovingTabindexInit", {
    detail: e.detail
  }));
}
function onModelChange(e) {
  const items = this.items;
  const fromItem = items[e.detail.fromIndex];
  const toItem = items[e.detail.toIndex];
  if (fromItem) {
    fromItem.setAttribute("tabindex", "-1");
  }
  if (toItem) {
    toItem.setAttribute("tabindex", "0");
    toItem.focus();
  }
  this._el.dispatchEvent(new CustomEvent("rovingTabindexChange", {
    detail: e.detail
  }));
}
function onModelReset(e) {
  refreshTabindex(this.items, e.detail.toIndex);
  this._el.dispatchEvent(new CustomEvent("rovingTabindexReset", {
    detail: e.detail
  }));
}
function onModelMutation(e) {
  refreshTabindex(this.items, e.detail.toIndex);
  this._el.dispatchEvent(new CustomEvent("rovingTabindexMutation", {
    detail: e.detail
  }));
}
class RovingTabindex {
  constructor(el) {
    this._el = el;
    this._onMutationListener = onModelMutation.bind(this);
    this._onChangeListener = onModelChange.bind(this);
    this._onInitListener = onModelInit.bind(this);
    this._onResetListener = onModelReset.bind(this);
    this._el.addEventListener("navigationModelMutation", this._onMutationListener);
    this._el.addEventListener("navigationModelChange", this._onChangeListener);
    this._el.addEventListener("navigationModelInit", this._onInitListener);
    this._el.addEventListener("navigationModelReset", this._onResetListener);
  }
  destroy() {
    this._el.removeEventListener("navigationModelMutation", this._onMutationListener);
    this._el.removeEventListener("navigationModelChange", this._onChangeListener);
    this._el.removeEventListener("navigationModelInit", this._onInitListener);
    this._el.removeEventListener("navigationModelReset", this._onResetListener);
  }
}
class LinearRovingTabindex extends RovingTabindex {
  constructor(el, itemSelector, selectedOptions) {
    super(el);
    this._options = Object.assign({}, defaultOptions, selectedOptions);
    this._itemSelector = itemSelector;

    // todo: options.index is deprecated. Remove support in future release.
    this._navigationEmitter = NavigationEmitter.createLinear(el, itemSelector, {
      autoInit: this._options.index !== undefined ? this._options.index : this._options.autoInit,
      autoReset: this._options.autoReset,
      wrap: this._options.wrap,
      axis: this._options.axis
    });
  }
  get index() {
    return this._navigationEmitter.model.index;
  }
  set index(newIndex) {
    this._navigationEmitter.model.index = newIndex;
  }
  set wrap(newWrap) {
    this._navigationEmitter.model.options.wrap = newWrap;
  }
  get currentItem() {
    return this._navigationEmitter.model.currentItem;
  }
  get items() {
    return this._navigationEmitter.model.items;
  }
  reset() {
    this._navigationEmitter.model.reset();
  }
  destroy() {
    super.destroy();
    this._navigationEmitter.destroy();
  }
}

/*
class GridRovingTabindex extends RovingTabindex {
    constructor(el, rowSelector, cellSelector, selectedOptions) {
        super(el);
    }
}
*/

function createLinear(el, itemSelector, selectedOptions) {
  return new LinearRovingTabindex(el, itemSelector, selectedOptions);
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};


var RovingTabindex = _interopRequireWildcard(__webpack_require__(513));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// REQUIRE
//const RovingTabindex = require('makeup-roving-tabindex');

// IMPORT

const rovers = [];
const appender = document.getElementById("appender");
const prepender = document.getElementById("prepender");
const removeFirst = document.getElementById("removeFirst");
const removeLast = document.getElementById("removeLast");
const widgetEls = document.querySelectorAll(".widget");
const wrap = document.getElementById("wrap");
const log = e => console.log(e.type, e.detail);
appender.addEventListener("click", function () {
  widgetEls.forEach(function (el) {
    const listItem = document.createElement("li");
    listItem.innerText = `Item ${parseInt(el.querySelectorAll("li").length + 1, 10)}`;
    el.children[0].appendChild(listItem);
  });
});
prepender.addEventListener("click", function () {
  widgetEls.forEach(function (el) {
    const ul = el.children[0];
    const listItem = document.createElement("li");
    listItem.innerText = `Item ${parseInt(el.querySelectorAll("li").length + 1, 10)}`;
    ul.insertBefore(listItem, ul.children[0]);
  });
});
removeFirst.addEventListener("click", function () {
  widgetEls.forEach(function (el) {
    const ul = el.children[0];
    const node = ul.firstElementChild;
    if (node) ul.removeChild(node);
  });
});
removeLast.addEventListener("click", function () {
  widgetEls.forEach(function (el) {
    const ul = el.children[0];
    const node = ul.lastElementChild;
    if (node) ul.removeChild(node);
  });
});
removeCurrent.addEventListener("click", () => rovers.forEach(widget => widget.currentItem.remove()));
disableCurrent.addEventListener("click", () => rovers.forEach(widget => widget.currentItem.setAttribute("aria-disabled", "true")));
hideCurrent.addEventListener("click", () => rovers.forEach(widget => widget.currentItem.hidden = true));
wrap.addEventListener("change", e => rovers.forEach(rover => rover.wrap = e.target.checked));
widgetEls.forEach(function (el) {
  el.addEventListener("rovingTabindexInit", log);
  el.addEventListener("rovingTabindexChange", log);
  el.addEventListener("rovingTabindexMutation", log);
  el.addEventListener("rovingTabindexReset", log);
  rovers.push(RovingTabindex.createLinear(el, "li"));
});
/******/ })()
;
//# sourceMappingURL=index.min.js.map