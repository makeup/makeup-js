/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 261:
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getAncestors = getAncestors;
exports.getSiblings = getSiblings;
exports.getSiblingsOfAncestors = getSiblingsOfAncestors;
// filter function for ancestor elements
const filterAncestor = item => item.nodeType === 1 && item.tagName.toLowerCase() !== "body" && item.tagName.toLowerCase() !== "html";

// filter function for sibling elements
const filterSibling = item => item.nodeType === 1 && item.tagName.toLowerCase() !== "script";

// reducer to flatten arrays
const flattenArrays = (a, b) => a.concat(b);

// recursive function to get previous sibling nodes of given element
function getPreviousSiblings(el) {
  let siblings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  const previousSibling = el.previousSibling;
  if (!previousSibling) {
    return siblings;
  }
  siblings.push(previousSibling);
  return getPreviousSiblings(previousSibling, siblings);
}

// recursive function to get next sibling nodes of given element
function getNextSiblings(el) {
  let siblings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  const nextSibling = el.nextSibling;
  if (!nextSibling) {
    return siblings;
  }
  siblings.push(nextSibling);
  return getNextSiblings(nextSibling, siblings);
}

// returns all sibling element nodes of given element
function getSiblings(el) {
  const allSiblings = getPreviousSiblings(el).concat(getNextSiblings(el));
  return allSiblings.filter(filterSibling);
}

// recursive function to get all ancestor nodes of given element
function getAllAncestors(el) {
  let ancestors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  const nextAncestor = el.parentNode;
  if (!nextAncestor) {
    return ancestors;
  }
  ancestors.push(nextAncestor);
  return getAllAncestors(nextAncestor, ancestors);
}

// get ancestor nodes of given element
function getAncestors(el) {
  return getAllAncestors(el).filter(filterAncestor);
}

// get siblings of ancestors (i.e. aunts and uncles) of given el
function getSiblingsOfAncestors(el) {
  return getAncestors(el).map(item => getSiblings(item)).reduce(flattenArrays, []);
}


/***/ }),

/***/ 893:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.trap = trap;
exports.untrap = untrap;
var util = _interopRequireWildcard(__webpack_require__(261));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
// the main landmark
let mainEl;

// the element that will be trapped
let trappedEl;

// collection of elements that get 'dirtied' with aria-hidden attr or hidden prop
let dirtyObjects;

// filter function for svg elements
const filterSvg = item => item.tagName.toLowerCase() !== "svg";
function showElementPrep(el, useHiddenProperty) {
  let preparedElement;
  if (useHiddenProperty === false) {
    preparedElement = prepareElement(el, "aria-hidden", "false");
  } else {
    preparedElement = prepareElement(el, "hidden", false);
  }
  return preparedElement;
}
function hideElementPrep(el, useHiddenProperty) {
  let preparedElement;
  if (useHiddenProperty === false) {
    preparedElement = prepareElement(el, "aria-hidden", "true");
  } else {
    preparedElement = prepareElement(el, "hidden", true);
  }
  return preparedElement;
}
function prepareElement(el, attributeName, dirtyValue) {
  const isProperty = typeof dirtyValue === "boolean";
  return {
    el,
    attributeName,
    cleanValue: isProperty ? el[attributeName] : el.getAttribute(attributeName),
    dirtyValue,
    isProperty
  };
}
function dirtyElement(preparedObj) {
  if (preparedObj.isProperty === true) {
    preparedObj.el[preparedObj.attributeName] = preparedObj.dirtyValue;
  } else {
    preparedObj.el.setAttribute(preparedObj.attributeName, preparedObj.dirtyValue);
  }
}
function cleanElement(preparedObj) {
  if (preparedObj.cleanValue) {
    if (preparedObj.isProperty === true) {
      preparedObj.el[preparedObj.attributeName] = preparedObj.cleanValue;
    } else {
      preparedObj.el.setAttribute(preparedObj.attributeName, preparedObj.cleanValue);
    }
  } else {
    preparedObj.el.removeAttribute(preparedObj.attributeName);
  }
}
function untrap() {
  if (trappedEl) {
    // restore 'dirtied' elements to their original state
    dirtyObjects.forEach(item => cleanElement(item));
    dirtyObjects = [];

    // 're-enable' the main landmark
    if (mainEl) {
      mainEl.setAttribute("role", "main");
    }

    // let observers know the screenreader is now untrapped
    trappedEl.dispatchEvent(new CustomEvent("screenreaderUntrap", {
      bubbles: true
    }));
    trappedEl = null;
  }
}
const defaultOptions = {
  useHiddenProperty: false
};
function trap(el, selectedOptions) {
  // ensure current trap is deactivated
  untrap();
  const options = Object.assign({}, defaultOptions, selectedOptions);

  // update the trapped el reference
  trappedEl = el;

  // update the main landmark reference
  mainEl = document.querySelector('main, [role="main"]');

  // we must remove the main landmark to avoid issues on voiceover iOS
  if (mainEl) {
    mainEl.setAttribute("role", "presentation");
  }

  // cache all ancestors, siblings & siblings of ancestors for trappedEl
  const ancestors = util.getAncestors(trappedEl);
  let siblings = util.getSiblings(trappedEl);
  let siblingsOfAncestors = util.getSiblingsOfAncestors(trappedEl);

  // if using hidden property, filter out SVG elements as they do not support this property
  if (options.useHiddenProperty === true) {
    siblings = siblings.filter(filterSvg);
    siblingsOfAncestors = siblingsOfAncestors.filter(filterSvg);
  }

  // prepare elements
  dirtyObjects = [showElementPrep(trappedEl, options.useHiddenProperty)].concat(ancestors.map(item => showElementPrep(item, options.useHiddenProperty))).concat(siblings.map(item => hideElementPrep(item, options.useHiddenProperty))).concat(siblingsOfAncestors.map(item => hideElementPrep(item, options.useHiddenProperty)));

  // update DOM
  dirtyObjects.forEach(item => dirtyElement(item));

  // let observers know the screenreader is now trapped
  trappedEl.dispatchEvent(new CustomEvent("screenreaderTrap", {
    bubbles: true
  }));
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};


var screenreaderTrap = _interopRequireWildcard(__webpack_require__(893));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
// REQUIRE
// const screenreaderTrap = require('makeup-screenreader-trap');

// IMPORT

document.querySelectorAll(".trap").forEach(function (item) {
  item.addEventListener("click", function () {
    if (this.getAttribute("aria-pressed") === "true") {
      screenreaderTrap.untrap(this);
    } else {
      screenreaderTrap.trap(this, {
        useHiddenProperty: false
      });
    }
  });
  item.addEventListener("screenreaderTrap", function (e) {
    console.log(this, e);
    this.innerText = "Untrap";
    this.setAttribute("aria-pressed", "true");
  });
  item.addEventListener("screenreaderUntrap", function (e) {
    console.log(this, e);
    this.innerText = "Trap";
    this.setAttribute("aria-pressed", "false");
  });
});
document.addEventListener("screenreaderTrap", function (e) {
  console.log(this, e);
});
document.addEventListener("screenreaderUntrap", function (e) {
  console.log(this, e);
});
/******/ })()
;
//# sourceMappingURL=index.min.js.map