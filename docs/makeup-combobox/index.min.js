/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 5638:
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

__webpack_require__(5942);


/***/ }),

/***/ 2859:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ 5942:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ 5107:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "default": function() { return /* binding */ makeup_combobox_dist_mjs_src_default; }
});

;// CONCATENATED MODULE: ./packages/makeup-next-id/dist/mjs/index.js
const sequenceMap = {};
const defaultPrefix = "nid";
const randomPortion = createRandomPortion(3);
function randomNumber(max) {
  return Math.floor(Math.random() * max);
}
function createRandomPortion(size) {
  const letters = "abcdefghijklmnopqrstuvwxyz";
  const digits = "0123456789";
  const allChars = letters + digits;
  let portion = letters[randomNumber(25)];
  for (let i = 1; i < size; i++) {
    portion += allChars[randomNumber(35)];
  }
  return portion;
}
function mjs_src_default(el, prefix = defaultPrefix) {
  const separator = prefix === "" ? "" : "-";
  const key = `${prefix}${separator}${randomPortion}`;
  sequenceMap[key] = sequenceMap[key] || 0;
  if (!el.id) {
    el.setAttribute("id", `${key}-${sequenceMap[key]++}`);
  }
  return el.id;
}


;// CONCATENATED MODULE: ./packages/makeup-exit-emitter/dist/mjs/index.js

const focusExitEmitters = {};
function doFocusExit(el, fromElement, toElement) {
  el.dispatchEvent(new CustomEvent("focusExit", {
    detail: { fromElement, toElement },
    bubbles: false
  }));
}
function onDocumentFocusIn(e) {
  const newFocusElement = e.target;
  const targetIsDescendant = this.el.contains(newFocusElement);
  if (targetIsDescendant === true) {
    this.currentFocusElement = newFocusElement;
  } else {
    window.removeEventListener("blur", this.onWindowBlurListener);
    document.removeEventListener("focusin", this.onDocumentFocusInListener);
    doFocusExit(this.el, this.currentFocusElement, newFocusElement);
    this.currentFocusElement = null;
  }
}
function onWindowBlur() {
  doFocusExit(this.el, this.currentFocusElement, void 0);
}
function onWidgetFocusIn() {
  document.addEventListener("focusin", this.onDocumentFocusInListener);
  window.addEventListener("blur", this.onWindowBlurListener);
}
class FocusExitEmitter {
  constructor(el) {
    this.el = el;
    this.currentFocusElement = null;
    this.onWidgetFocusInListener = onWidgetFocusIn.bind(this);
    this.onDocumentFocusInListener = onDocumentFocusIn.bind(this);
    this.onWindowBlurListener = onWindowBlur.bind(this);
    this.el.addEventListener("focusin", this.onWidgetFocusInListener);
  }
  removeEventListeners() {
    window.removeEventListener("blur", this.onWindowBlurListener);
    document.removeEventListener("focusin", this.onDocumentFocusInListener);
    this.el.removeEventListener("focusin", this.onWidgetFocusInListener);
  }
}
function addFocusExit(el) {
  let exitEmitter = null;
  mjs_src_default(el);
  if (!focusExitEmitters[el.id]) {
    exitEmitter = new FocusExitEmitter(el);
    focusExitEmitters[el.id] = exitEmitter;
  }
  return exitEmitter;
}
function removeFocusExit(el) {
  const exitEmitter = focusExitEmitters[el.id];
  if (exitEmitter) {
    exitEmitter.removeEventListeners();
    delete focusExitEmitters[el.id];
  }
}


;// CONCATENATED MODULE: ./packages/makeup-focusables/dist/mjs/index.js
const focusableElList = [
  "a[href]",
  "area[href]",
  "button:not([disabled])",
  "embed",
  "iframe",
  "input:not([disabled])",
  "object",
  "select:not([disabled])",
  "textarea:not([disabled])",
  "*[tabindex]",
  "*[contenteditable]"
];
const focusableElSelector = focusableElList.join();
function src_default(el, keyboardOnly = false, callback) {
  if (callback) {
    const request = requestAnimationFrame(() => {
      callback(getFocusables(el, keyboardOnly));
    });
    return () => {
      cancelAnimationFrame(request);
    };
  }
  return getFocusables(el, keyboardOnly);
}
function getFocusables(el, keyboardOnly = false) {
  let focusableEls = Array.prototype.slice.call(el.querySelectorAll(focusableElSelector));
  focusableEls = focusableEls.filter(function(focusableEl) {
    return window.getComputedStyle(focusableEl).display !== "none";
  });
  if (keyboardOnly === true) {
    focusableEls = focusableEls.filter(function(focusableEl) {
      return focusableEl.getAttribute("tabindex") !== "-1";
    });
  }
  return focusableEls;
}


;// CONCATENATED MODULE: ./packages/makeup-expander/dist/mjs/index.js



const defaultOptions = {
  alwaysDoFocusManagement: false,
  ariaControls: true,
  autoCollapse: false,
  collapseOnFocusOut: false,
  collapseOnMouseOut: false,
  collapseOnClickOut: false,
  contentSelector: ".expander__content",
  expandedClass: null,
  expandOnClick: false,
  expandOnFocus: false,
  expandOnHover: false,
  focusManagement: null,
  hostSelector: ".expander__host",
  simulateSpacebarClick: false
};
function onHostKeyDown(e) {
  if (e.keyCode === 13 || e.keyCode === 32) {
    this._keyboardClickFlag = true;
  }
  if (e.keyCode === 32 && this.options.simulateSpacebarClick === true) {
    this.hostEl.click();
  }
}
function onHostMouseDown() {
  this._mouseClickFlag = true;
}
function onHostClick() {
  this._expandWasKeyboardClickActivated = this._keyboardClickFlag;
  this._expandWasMouseClickActivated = this._mouseClickFlag;
  this.expanded = !this.expanded;
}
function onHostFocus() {
  this._expandWasFocusActivated = true;
  this.expanded = true;
}
function onHostHover() {
  clearTimeout(this._mouseLeft);
  this._expandWasHoverActivated = true;
  this.expanded = true;
}
function onFocusExit() {
  this.expanded = false;
}
function onMouseLeave() {
  clearTimeout(this._mouseLeft);
  this._mouseLeft = setTimeout(() => {
    this.expanded = false;
  }, 300);
}
function _onDocumentClick(e) {
  if (this.el.contains(e.target) === false) {
    this.expanded = false;
  }
}
function _onDocumentTouchStart() {
  this.documentClick = true;
}
function _onDocumentTouchMove() {
  this.documentClick = false;
}
function _onDocumentTouchEnd(e) {
  if (this.documentClick === true) {
    this.documentClick = false;
    if (this.el.contains(e.target) === false) {
      this.expanded = false;
    }
  }
}
function manageFocus(focusManagement, contentEl) {
  if (focusManagement === "content") {
    contentEl.setAttribute("tabindex", "-1");
    contentEl.focus();
  } else if (focusManagement === "focusable") {
    src_default(contentEl)[0].focus();
  } else if (focusManagement === "interactive") {
    src_default(contentEl, true)[0].focus();
  } else if (focusManagement !== null) {
    const el = contentEl.querySelector(`#${focusManagement}`);
    if (el) {
      el.focus();
    }
  }
}
class dist_mjs_src_default {
  constructor(el, selectedOptions) {
    this.options = Object.assign({}, defaultOptions, selectedOptions);
    this.el = el;
    this.hostEl = el.querySelector(this.options.hostSelector);
    this.contentEl = el.querySelector(this.options.contentSelector);
    addFocusExit(this.el);
    this._hostKeyDownListener = onHostKeyDown.bind(this);
    this._hostMouseDownListener = onHostMouseDown.bind(this);
    this._documentClickListener = _onDocumentClick.bind(this);
    this._documentTouchStartListener = _onDocumentTouchStart.bind(this);
    this._documentTouchMoveListener = _onDocumentTouchMove.bind(this);
    this._documentTouchEndListener = _onDocumentTouchEnd.bind(this);
    this._hostClickListener = onHostClick.bind(this);
    this._hostFocusListener = onHostFocus.bind(this);
    this._hostHoverListener = onHostHover.bind(this);
    this._focusExitListener = onFocusExit.bind(this);
    this._mouseLeaveListener = onMouseLeave.bind(this);
    if (this.hostEl.getAttribute("aria-expanded") === null) {
      this.hostEl.setAttribute("aria-expanded", "false");
    }
    if (this.options.ariaControls === true) {
      mjs_src_default(this.el, "expander");
      this.contentEl.id = this.contentEl.id || `${this.el.id}-content`;
      this.hostEl.setAttribute("aria-controls", this.contentEl.id);
    }
    this.expandOnClick = this.options.expandOnClick;
    this.expandOnFocus = this.options.expandOnFocus;
    this.expandOnHover = this.options.expandOnHover;
    if (this.options.autoCollapse === false) {
      this.collapseOnClickOut = this.options.collapseOnClickOut;
      this.collapseOnFocusOut = this.options.collapseOnFocusOut;
      this.collapseOnMouseOut = this.options.collapseOnMouseOut;
    }
  }
  set expandOnClick(bool) {
    if (bool === true) {
      this.hostEl.addEventListener("keydown", this._hostKeyDownListener);
      this.hostEl.addEventListener("mousedown", this._hostMouseDownListener);
      this.hostEl.addEventListener("click", this._hostClickListener);
      if (this.options.autoCollapse === true) {
        this.collapseOnClickOut = true;
        this.collapseOnFocusOut = true;
      }
    } else {
      this.hostEl.removeEventListener("click", this._hostClickListener);
      this.hostEl.removeEventListener("mousedown", this._hostMouseDownListener);
      this.hostEl.removeEventListener("keydown", this._hostKeyDownListener);
    }
  }
  set expandOnFocus(bool) {
    if (bool === true) {
      this.hostEl.addEventListener("focus", this._hostFocusListener);
      if (this.options.autoCollapse === true) {
        this.collapseOnClickOut = true;
        this.collapseOnFocusOut = true;
      }
    } else {
      this.hostEl.removeEventListener("focus", this._hostFocusListener);
    }
  }
  set expandOnHover(bool) {
    if (bool === true) {
      this.hostEl.addEventListener("mouseenter", this._hostHoverListener);
      this.contentEl.addEventListener("mouseenter", this._hostHoverListener);
      if (this.options.autoCollapse === true) {
        this.collapseOnMouseOut = true;
      }
    } else {
      this.hostEl.removeEventListener("mouseenter", this._hostHoverListener);
      this.contentEl.removeEventListener("mouseenter", this._hostHoverListener);
    }
  }
  set collapseOnClickOut(bool) {
    if (bool === true) {
      document.addEventListener("click", this._documentClickListener);
      document.addEventListener("touchstart", this._documentTouchStartListener);
      document.addEventListener("touchmove", this._documentTouchMoveListener);
      document.addEventListener("touchend", this._documentTouchEndListener);
    } else {
      document.removeEventListener("click", this._documentClickListener);
      document.removeEventListener("touchstart", this._documentTouchStartListener);
      document.removeEventListener("touchmove", this._documentTouchMoveListener);
      document.removeEventListener("touchend", this._documentTouchEndListener);
    }
  }
  set collapseOnFocusOut(bool) {
    if (bool === true) {
      this.el.addEventListener("focusExit", this._focusExitListener);
    } else {
      this.el.removeEventListener("focusExit", this._focusExitListener);
    }
  }
  set collapseOnMouseOut(bool) {
    if (bool === true) {
      this.el.addEventListener("mouseleave", this._mouseLeaveListener);
      this.contentEl.addEventListener("mouseleave", this._mouseLeaveListener);
    } else {
      this.el.removeEventListener("mouseleave", this._mouseLeaveListener);
      this.contentEl.removeEventListener("mouseleave", this._mouseLeaveListener);
    }
  }
  get expanded() {
    return this.hostEl.getAttribute("aria-expanded") === "true";
  }
  set expanded(bool) {
    if (bool === true && this.expanded === false) {
      this.hostEl.setAttribute("aria-expanded", "true");
      if (this.options.expandedClass) {
        this.el.classList.add(this.options.expandedClass);
      }
      if (this._expandWasKeyboardClickActivated || this._expandWasMouseClickActivated && this.options.alwaysDoFocusManagement) {
        manageFocus(this.options.focusManagement, this.contentEl);
      }
      this.el.dispatchEvent(new CustomEvent("expander-expand", { bubbles: true, detail: this.contentEl }));
    }
    if (bool === false && this.expanded === true) {
      this.hostEl.setAttribute("aria-expanded", "false");
      if (this.options.expandedClass) {
        this.el.classList.remove(this.options.expandedClass);
      }
      this.el.dispatchEvent(new CustomEvent("expander-collapse", { bubbles: true, detail: this.contentEl }));
    }
    this._expandWasKeyboardClickActivated = false;
    this._expandWasMouseClickActivated = false;
    this._expandWasFocusActivated = false;
    this._expandWasHoverActivated = false;
    this._keyboardClickFlag = false;
    this._mouseClickFlag = false;
  }
  sleep() {
    if (this._destroyed !== true) {
      this.expandOnClick = false;
      this.expandOnFocus = false;
      this.expandOnHover = false;
      this.collapseOnClickOut = false;
      this.collapseOnFocusOut = false;
      this.collapseOnMouseOut = false;
    }
  }
  destroy() {
    this.sleep();
    this._destroyed = true;
    this._hostKeyDownListener = null;
    this._hostMouseDownListener = null;
    this._documentClickListener = null;
    this._documentTouchStartListener = null;
    this._documentTouchMoveListener = null;
    this._documentTouchEndListener = null;
    this._hostClickListener = null;
    this._hostFocusListener = null;
    this._hostHoverListener = null;
    this._focusExitListener = null;
    this._mouseLeaveListener = null;
  }
}


;// CONCATENATED MODULE: ./packages/makeup-key-emitter/dist/mjs/index.js
function uncapitalizeFirstLetter(str) {
  return str.charAt(0).toLowerCase() + str.slice(1);
}
function onKeyDownOrUp(evt, el, keyEventType) {
  if (!evt.shiftKey) {
    const key = evt.key;
    switch (key) {
      case "Enter":
      case "Escape":
      case "PageUp":
      case "PageDown":
      case "End":
      case "Home":
      case "ArrowLeft":
      case "ArrowUp":
      case "ArrowRight":
      case "ArrowDown":
        el.dispatchEvent(new CustomEvent(uncapitalizeFirstLetter(`${key}Key${keyEventType}`), {
          detail: evt,
          bubbles: true
        }));
        break;
      case " ":
        el.dispatchEvent(new CustomEvent(`spacebarKey${keyEventType}`, {
          detail: evt,
          bubbles: true
        }));
        break;
      default:
        return;
    }
  }
}
function onKeyDown(e) {
  onKeyDownOrUp(e, this, "Down");
}
function onKeyUp(e) {
  onKeyDownOrUp(e, this, "Up");
}
function addKeyDown(el) {
  el.addEventListener("keydown", onKeyDown);
}
function addKeyUp(el) {
  el.addEventListener("keyup", onKeyUp);
}
function removeKeyDown(el) {
  el.removeEventListener("keydown", onKeyDown);
}
function removeKeyUp(el) {
  el.removeEventListener("keyup", onKeyUp);
}
function add(el) {
  addKeyDown(el);
  addKeyUp(el);
}
function remove(el) {
  removeKeyDown(el);
  removeKeyUp(el);
}


;// CONCATENATED MODULE: ./packages/makeup-navigation-emitter/dist/mjs/index.js


const dataSetKey = "data-makeup-index";
const mjs_defaultOptions = {
  axis: "both",
  autoInit: 0,
  autoReset: null,
  ignoreButtons: false,
  wrap: false
};
const itemFilter = (el) => !el.hidden;
function clearData(els) {
  els.forEach((el) => el.removeAttribute(dataSetKey));
}
function setData(els) {
  els.forEach((el, index) => el.setAttribute(dataSetKey, index));
}
function isButton(el) {
  return el.tagName.toLowerCase() === "button" || el.type === "button";
}
function onKeyPrev(e) {
  if (isButton(e.detail.target) === false || this.options.ignoreButtons === false) {
    if (!this.atStart()) {
      this.index--;
    } else if (this.options.wrap) {
      this.index = this.filteredItems.length - 1;
    }
  }
}
function onKeyNext(e) {
  if (isButton(e.detail.target) === false || this.options.ignoreButtons === false) {
    if (!this.atEnd()) {
      this.index++;
    } else if (this.options.wrap) {
      this.index = 0;
    }
  }
}
function onClick(e) {
  let element = e.target;
  let indexData = element.dataset.makeupIndex;
  while (element !== this._el && !indexData) {
    element = element.parentNode;
    indexData = element.dataset.makeupIndex;
  }
  if (indexData !== void 0) {
    this.index = indexData;
  }
}
function onKeyHome(e) {
  if (isButton(e.detail.target) === false || this.options.ignoreButtons === false) {
    this.index = 0;
  }
}
function onKeyEnd(e) {
  if (isButton(e.detail.target) === false || this.options.ignoreButtons === false) {
    this.index = this.filteredItems.length;
  }
}
function mjs_onFocusExit() {
  if (this.options.autoReset !== null) {
    this.reset();
  }
}
function onMutation() {
  clearData(this.items);
  setData(this.filteredItems);
  this._el.dispatchEvent(new CustomEvent("navigationModelMutation"));
}
class NavigationModel {
  constructor(el, itemSelector, selectedOptions) {
    this.options = Object.assign({}, mjs_defaultOptions, selectedOptions);
    this._el = el;
    this._itemSelector = itemSelector;
  }
}
class LinearNavigationModel extends NavigationModel {
  constructor(el, itemSelector, selectedOptions) {
    super(el, itemSelector, selectedOptions);
    if (this.options.autoInit !== null) {
      this._index = this.options.autoInit;
      this._el.dispatchEvent(new CustomEvent("navigationModelInit", {
        detail: {
          items: this.filteredItems,
          toIndex: this.options.autoInit
        },
        bubbles: false
      }));
    }
  }
  get items() {
    return this._el.querySelectorAll(this._itemSelector);
  }
  get filteredItems() {
    return Array.prototype.slice.call(this.items).filter(itemFilter);
  }
  get index() {
    return this._index;
  }
  set index(newIndex) {
    if (newIndex > -1 && newIndex < this.filteredItems.length && newIndex !== this.index) {
      this._el.dispatchEvent(new CustomEvent("navigationModelChange", {
        detail: {
          fromIndex: this.index,
          toIndex: newIndex
        },
        bubbles: false
      }));
      this._index = newIndex;
    }
  }
  reset() {
    if (this.options.autoReset !== null) {
      this._index = this.options.autoReset;
      this._el.dispatchEvent(new CustomEvent("navigationModelReset", {
        detail: {
          toIndex: this.options.autoReset
        },
        bubbles: false
      }));
    }
  }
  atEnd() {
    return this.index === this.filteredItems.length - 1;
  }
  atStart() {
    return this.index <= 0;
  }
}
class NavigationEmitter {
  constructor(el, model) {
    this.model = model;
    this.el = el;
    this._keyPrevListener = onKeyPrev.bind(model);
    this._keyNextListener = onKeyNext.bind(model);
    this._keyHomeListener = onKeyHome.bind(model);
    this._keyEndListener = onKeyEnd.bind(model);
    this._clickListener = onClick.bind(model);
    this._focusExitListener = mjs_onFocusExit.bind(model);
    this._observer = new MutationObserver(onMutation.bind(model));
    setData(model.filteredItems);
    addKeyDown(this.el);
    addFocusExit(this.el);
    const axis = model.options.axis;
    if (axis === "both" || axis === "x") {
      this.el.addEventListener("arrowLeftKeyDown", this._keyPrevListener);
      this.el.addEventListener("arrowRightKeyDown", this._keyNextListener);
    }
    if (axis === "both" || axis === "y") {
      this.el.addEventListener("arrowUpKeyDown", this._keyPrevListener);
      this.el.addEventListener("arrowDownKeyDown", this._keyNextListener);
    }
    this.el.addEventListener("homeKeyDown", this._keyHomeListener);
    this.el.addEventListener("endKeyDown", this._keyEndListener);
    this.el.addEventListener("click", this._clickListener);
    this.el.addEventListener("focusExit", this._focusExitListener);
    this._observer.observe(this.el, {
      childList: true,
      subtree: true,
      attributeFilter: ["hidden"],
      attributes: true
    });
  }
  destroy() {
    removeKeyDown(this.el);
    removeFocusExit(this.el);
    this.el.removeEventListener("arrowLeftKeyDown", this._keyPrevListener);
    this.el.removeEventListener("arrowRightKeyDown", this._keyNextListener);
    this.el.removeEventListener("arrowUpKeyDown", this._keyPrevListener);
    this.el.removeEventListener("arrowDownKeyDown", this._keyNextListener);
    this.el.removeEventListener("homeKeyDown", this._keyHomeListener);
    this.el.removeEventListener("endKeyDown", this._keyEndListener);
    this.el.removeEventListener("click", this._clickListener);
    this.el.removeEventListener("focusExit", this._focusExitListener);
    this._observer.disconnect();
  }
}
function createLinear(el, itemSelector, selectedOptions) {
  const model = new LinearNavigationModel(el, itemSelector, selectedOptions);
  return new NavigationEmitter(el, model);
}


;// CONCATENATED MODULE: ./packages/makeup-active-descendant/dist/mjs/index.js



const dist_mjs_defaultOptions = {
  activeDescendantClassName: "active-descendant",
  autoInit: -1,
  autoReset: -1,
  autoScroll: false,
  axis: "both",
  ignoreButtons: false
};
function onModelMutation() {
  const options = this._options;
  const modelIndex = this._navigationEmitter.model.index;
  this.filteredItems.forEach(function(item, index) {
    mjs_src_default(item);
    if (index !== modelIndex) {
      item.classList.remove(options.activeDescendantClassName);
    } else {
      item.classList.add(options.activeDescendantClassName);
    }
  });
}
function onModelChange(e) {
  const fromItem = this.filteredItems[e.detail.fromIndex];
  const toItem = this.filteredItems[e.detail.toIndex];
  if (fromItem) {
    fromItem.classList.remove(this._options.activeDescendantClassName);
  }
  if (toItem) {
    toItem.classList.add(this._options.activeDescendantClassName);
    this._focusEl.setAttribute("aria-activedescendant", toItem.id);
    if (this._options.autoScroll && this._containerEl) {
      this._containerEl.scrollTop = toItem.offsetTop - this._containerEl.offsetHeight / 2;
    }
  }
  this._el.dispatchEvent(new CustomEvent("activeDescendantChange", {
    detail: {
      fromIndex: e.detail.fromIndex,
      toIndex: e.detail.toIndex
    }
  }));
}
function onModelReset(e) {
  const toIndex = e.detail.toIndex;
  const activeClassName = this._options.activeDescendantClassName;
  this.filteredItems.forEach(function(el) {
    el.classList.remove(activeClassName);
  });
  if (toIndex > -1) {
    const itemEl = this.filteredItems[toIndex];
    itemEl.classList.add(activeClassName);
    this._focusEl.setAttribute("aria-activedescendant", itemEl.id);
  } else {
    this._focusEl.removeAttribute("aria-activedescendant");
  }
}
class ActiveDescendant {
  constructor(el) {
    this._el = el;
    this._onMutationListener = onModelMutation.bind(this);
    this._onChangeListener = onModelChange.bind(this);
    this._onResetListener = onModelReset.bind(this);
    this._el.addEventListener("navigationModelMutation", this._onMutationListener);
    this._el.addEventListener("navigationModelChange", this._onChangeListener);
    this._el.addEventListener("navigationModelReset", this._onResetListener);
  }
  destroy() {
    this._el.removeEventListener("navigationModelMutation", this._onMutationListener);
    this._el.removeEventListener("navigationModelChange", this._onChangeListener);
    this._el.removeEventListener("navigationModelReset", this._onResetListener);
  }
}
class LinearActiveDescendant extends ActiveDescendant {
  constructor(el, focusEl, containerEl, itemSelector, selectedOptions) {
    super(el);
    this._options = Object.assign({}, dist_mjs_defaultOptions, selectedOptions);
    this._navigationEmitter = createLinear(el, itemSelector, {
      autoInit: this._options.autoInit,
      autoReset: this._options.autoReset,
      axis: this._options.axis,
      ignoreButtons: this._options.ignoreButtons
    });
    this._focusEl = focusEl;
    this._containerEl = containerEl;
    this._itemSelector = itemSelector;
    mjs_src_default(containerEl);
    if (containerEl !== focusEl) {
      focusEl.setAttribute("aria-owns", containerEl.id);
    }
    this.items.forEach(function(itemEl) {
      mjs_src_default(itemEl);
    });
    if (this._options.autoInit > -1) {
      const itemEl = this.filteredItems[this._options.autoInit];
      itemEl.classList.add(this._options.activeDescendantClassName);
      this._focusEl.setAttribute("aria-activedescendant", itemEl.id);
    }
  }
  get index() {
    return this._navigationEmitter.model.index;
  }
  set index(newIndex) {
    this._navigationEmitter.model.index = newIndex;
  }
  reset() {
    this._navigationEmitter.model.reset();
  }
  get filteredItems() {
    return this._navigationEmitter.model.filteredItems;
  }
  get items() {
    return this._navigationEmitter.model.items;
  }
  get _items() {
    return this.items;
  }
  set wrap(newWrap) {
    this._navigationEmitter.model.options.wrap = newWrap;
  }
  destroy() {
    super.destroy();
    this._navigationEmitter.destroy();
  }
}
function mjs_createLinear(el, focusEl, containerEl, itemSelector, selectedOptions) {
  return new LinearActiveDescendant(el, focusEl, containerEl, itemSelector, selectedOptions);
}
"use strict";


;// CONCATENATED MODULE: ./packages/makeup-prevent-scroll-keys/dist/mjs/index.js
function mjs_onKeyDown(e) {
  if (e.keyCode >= 32 && e.keyCode <= 40) {
    e.preventDefault();
  }
}
function mjs_add(el) {
  el.addEventListener("keydown", mjs_onKeyDown);
}
function mjs_remove(el) {
  el.removeEventListener("keydown", mjs_onKeyDown);
}


;// CONCATENATED MODULE: ./packages/makeup-listbox/dist/mjs/index.js


const makeup_listbox_dist_mjs_defaultOptions = {
  activeDescendantClassName: "listbox__option--active",
  autoReset: null,
  autoSelect: true,
  customElementMode: false,
  focusableElement: null,
  listboxOwnerElement: null,
  multiSelect: false,
  useAriaChecked: true
};
class makeup_listbox_dist_mjs_src_default {
  constructor(widgetEl, selectedOptions) {
    this._options = Object.assign({}, makeup_listbox_dist_mjs_defaultOptions, selectedOptions);
    this.el = widgetEl;
    this._activeDescendantRootEl = this._options.listboxOwnerElement || this.el;
    if (widgetEl.getAttribute("role") === "listbox") {
      this._listboxEl = widgetEl;
    } else {
      this._listboxEl = this.el.querySelector("[role=listbox]");
    }
    if (!this._options.focusableElement && this._listboxEl.getAttribute("tabindex") === null) {
      this._listboxEl.setAttribute("tabindex", "0");
    }
    this._activeDescendant = mjs_createLinear(this._activeDescendantRootEl, this._options.focusableElement || this._listboxEl, this._listboxEl, "[role=option]", {
      activeDescendantClassName: this._options.activeDescendantClassName,
      autoInit: this.index,
      autoReset: this._options.autoReset,
      axis: "y",
      ignoreButtons: true
    });
    mjs_add(this.el);
    this._onFocusListener = _onFocus.bind(this);
    this._onMouseDownListener = _onMouseDown.bind(this);
    this._onKeyDownListener = _onKeyDown.bind(this);
    this._onClickListener = _onClick.bind(this);
    this._onActiveDescendantChangeListener = _onActiveDescendantChange.bind(this);
    this._onMutationListener = _onMutation.bind(this);
    this.el.classList.add("listbox--js");
    if (!this._options.customElementMode) {
      this._mutationObserver = new MutationObserver(this._onMutationListener);
      this._observeMutations();
      this._observeEvents();
    }
  }
  _observeMutations() {
    if (!this._options.customElementMode) {
      this._mutationObserver.observe(this._listboxEl, {
        attributeFilter: ["aria-selected"],
        attributes: true,
        childList: true,
        subtree: true
      });
    }
  }
  _unobserveMutations() {
    if (!this._options.customElementMode) {
      this._mutationObserver.disconnect();
    }
  }
  _observeEvents() {
    if (this._destroyed !== true) {
      this._listboxEl.addEventListener("focus", this._onFocusListener);
      this._listboxEl.addEventListener("mousedown", this._onMouseDownListener);
      this._activeDescendantRootEl.addEventListener("activeDescendantChange", this._onActiveDescendantChangeListener);
      this._listboxEl.addEventListener("keydown", this._onKeyDownListener);
      this._listboxEl.addEventListener("click", this._onClickListener);
    }
  }
  _unobserveEvents() {
    this._listboxEl.removeEventListener("focus", this._onFocusListener);
    this._listboxEl.removeEventListener("mousedown", this._onMouseDownListener);
    this._listboxEl.removeEventListener("keydown", this._onKeyDownListener);
    this._listboxEl.removeEventListener("click", this._onClickListener);
    this._activeDescendantRootEl.removeEventListener("activeDescendantChange", this._onActiveDescendantChangeListener);
  }
  get index() {
    return [...this.items].findIndex((el) => el.getAttribute("aria-selected") === "true");
  }
  get items() {
    return this._listboxEl.querySelectorAll("[role=option]");
  }
  select(index) {
    this._unobserveMutations();
    if (_indexInBounds(index, this.items.length)) {
      this.items[index].setAttribute("aria-selected", "true");
      if (this._options.useAriaChecked === true) {
        this.items[index].setAttribute("aria-checked", "true");
      }
      this.el.dispatchEvent(new CustomEvent("makeup-listbox-change", {
        detail: {
          optionIndex: index,
          optionValue: this.items[index].innerText
        }
      }));
    }
    this._observeMutations();
  }
  unselect(index) {
    this._unobserveMutations();
    if (_indexInBounds(index, this.items.length)) {
      this.items[index].setAttribute("aria-selected", "false");
      if (this._options.useAriaChecked === true) {
        this.items[index].setAttribute("aria-checked", "false");
      }
    }
    this._observeMutations();
  }
  destroy() {
    this._destroyed = true;
    this._unobserveMutations();
    this._unobserveEvents();
    this._onFocusListener = null;
    this._onMouseDownListener = null;
    this._onKeyDownListener = null;
    this._onClickListener = null;
    this._onActiveDescendantChangeListener = null;
    this._onMutationListener = null;
  }
}
function _onFocus() {
  this._unobserveMutations();
  if (this._mouseDownFlag !== true && this._options.autoSelect === true && this.index === -1) {
    this._activeDescendant.index = 0;
    this.items[0].setAttribute("aria-selected", "true");
    if (this._options.useAriaChecked === true) {
      this.items[0].setAttribute("aria-checked", "true");
    }
  }
  this._mouseDownFlag = false;
  this._observeMutations();
}
function _onMouseDown() {
  this._mouseDownFlag = true;
}
function _onKeyDown(e) {
  if (e.keyCode === 13 || e.keyCode === 32) {
    const toElIndex = this._activeDescendant.index;
    const toEl = this.items[toElIndex];
    const isTolElSelected = toEl.getAttribute("aria-selected") === "true";
    if (this._options.autoSelect === false && isTolElSelected === false) {
      this.unselect(this.index);
      this.select(toElIndex);
    }
  }
}
function _onClick(e) {
  const toEl = e.target.closest("[role=option]");
  const toElIndex = toEl.dataset.makeupIndex;
  const isTolElSelected = toEl.getAttribute("aria-selected") === "true";
  if (this._options.autoSelect === false && isTolElSelected === false) {
    this.unselect(this.index);
    this.select(toElIndex);
  }
}
function _onActiveDescendantChange(e) {
  this.el.dispatchEvent(new CustomEvent("makeup-listbox-active-descendant-change", {
    detail: e.detail
  }));
  if (this._options.autoSelect === true) {
    const fromEl = this.items[e.detail.fromIndex];
    const toEl = this.items[e.detail.toIndex];
    if (fromEl) {
      this.unselect(e.detail.fromIndex);
    }
    if (toEl) {
      this.select(e.detail.toIndex);
    }
  }
}
function _onMutation(mutationsList) {
  for (const mutation of mutationsList) {
    if (mutation.type === "attributes") {
      this.el.dispatchEvent(new CustomEvent("makeup-listbox-mutation", {
        detail: {
          attributeName: mutation.attributeName
        }
      }));
    }
  }
}
function _indexInBounds(index, size) {
  return index > -1 && index < size;
}


;// CONCATENATED MODULE: ./packages/makeup-combobox/dist/mjs/index.js


const nodeListToArray = (nodeList) => Array.prototype.slice.call(nodeList);
const makeup_combobox_dist_mjs_defaultOptions = {
  autoSelect: true,
  collapseTimeout: 150,
  customElementMode: false
};
class makeup_combobox_dist_mjs_src_default {
  constructor(widgetEl, selectedOptions) {
    this._options = Object.assign({}, makeup_combobox_dist_mjs_defaultOptions, selectedOptions);
    this._el = widgetEl;
    this._inputEl = this._el.querySelector("input");
    this._listboxEl = this._el.querySelector(".combobox__listbox");
    this._autocompleteType = this._inputEl.getAttribute("aria-autocomplete");
    this._inputEl.setAttribute("autocomplete", "off");
    this._inputEl.setAttribute("role", "combobox");
    this._listboxEl.hidden = false;
    this._listboxWidget = new makeup_listbox_dist_mjs_src_default(this._listboxEl, {
      activeDescendantClassName: "combobox__option--active",
      autoReset: -1,
      autoSelect: this._options.autoSelect,
      focusableElement: this._inputEl,
      listboxOwnerElement: this._el
    });
    this._expander = new dist_mjs_src_default(this._el, {
      collapseOnClickOut: true,
      collapseOnFocusOut: true,
      contentSelector: ".combobox__listbox",
      expandedClass: "combobox--expanded",
      expandOnFocus: true,
      hostSelector: "input"
    });
    this._destroyed = false;
    this._onInputFocusListener = _onInputFocus.bind(this);
    this._onListboxClickListener = _onListboxClick.bind(this);
    this._onListboxActiveDescendantChangeListener = _onListboxActiveDescendantChange.bind(this);
    this._onTextboxKeyDownListener = _onTextboxKeyDown.bind(this);
    this._onTextboxInputListener = _onTextboxInput.bind(this);
    this._onTextboxClickListener = _onTextboxClick.bind(this);
    this._onMutationListener = mjs_onMutation.bind(this);
    this._el.classList.add("combobox--js");
    if (!this._options.customElementMode) {
      this._mutationObserver = new MutationObserver(this._onMutationListener);
      this._observeMutations();
      this._observeEvents();
    }
  }
  resetFilter() {
    this._listboxWidget._activeDescendant.reset();
    this._listboxWidget.items.forEach((el) => el.hidden = false);
  }
  _observeMutations() {
    if (!this._options.customElementMode) {
      this._mutationObserver.observe(this._inputEl, {
        attributes: true,
        childList: true,
        subtree: true
      });
    }
  }
  _unobserveMutations() {
    if (!this._options.customElementMode) {
      this._mutationObserver.disconnect();
    }
  }
  _observeEvents() {
    if (this._destroyed !== true) {
      this._listboxEl.addEventListener("click", this._onListboxClickListener);
      this._listboxEl.addEventListener("makeup-listbox-active-descendant-change", this._onListboxActiveDescendantChangeListener);
      this._inputEl.addEventListener("focus", this._onInputFocusListener);
      this._inputEl.addEventListener("keydown", this._onTextboxKeyDownListener);
      this._inputEl.addEventListener("input", this._onTextboxInputListener);
      this._inputEl.addEventListener("click", this._onTextboxClickListener);
    }
  }
  _unobserveEvents() {
    this._listboxEl.removeEventListener("click", this._onListboxClickListener);
    this._listboxEl.removeEventListener("makeup-listbox-active-descendant-change", this._onListboxActiveDescendantChangeListener);
    this._inputEl.removeEventListener("focus", this._onInputFocusListener);
    this._inputEl.removeEventListener("keydown", this._onTextboxKeyDownListener);
    this._inputEl.removeEventListener("input", this._onTextboxInputListener);
    this._inputEl.removeEventListener("click", this._onTextboxClickListener);
  }
  destroy() {
    this._destroyed = true;
    this._unobserveMutations();
    this._unobserveEvents();
    this._onInputFocusListener = null;
    this._onListboxClickListener = null;
    this._onListboxActiveDesendanctChangeListener = null;
    this._onTextboxKeyDownListener = null;
    this._onTextboxInputListener = null;
    this._onTextboxClickListener = null;
    this._onMutationListener = null;
  }
}
function _onInputFocus() {
  this.resetFilter();
}
function _onTextboxKeyDown(e) {
  if (e.keyCode === 38 || e.keyCode === 40) {
    e.preventDefault();
  }
  if (e.keyCode === 40) {
    if (this._expander.expanded === false) {
      this._expander.expanded = true;
    }
  }
  if (e.keyCode === 27) {
    if (this._expander.expanded === true) {
      this._expander.expanded = false;
      this._listboxWidget._activeDescendant.reset();
    }
  }
  if (this._options.autoSelect === false && e.keyCode === 13 && this._inputEl.getAttribute("aria-activedescendant")) {
    e.preventDefault();
    const widget = this;
    this._inputEl.value = nodeListToArray(this._listboxWidget.items).filter((el) => !el.hidden)[this._listboxWidget._activeDescendant.index].innerText;
    _dispatchChangeEvent(this._el, this._inputEl.value);
    this._listboxWidget._activeDescendant.reset();
    setTimeout(function() {
      widget._expander.expanded = false;
      if (widget._autocompleteType === "list") {
        if (widget._inputEl.value.length === 0) {
          widget.resetFilter();
        } else {
          _filterSuggestions(widget._inputEl.value, widget._listboxWidget.items);
        }
      }
    }, this._options.collapseTimeout);
  }
}
function _onTextboxClick() {
  if (this._expander.expanded === false) {
    this._expander.expanded = true;
  }
}
function _onTextboxInput() {
  if (this._expander.expanded === false) {
    this._expander.expanded = true;
  }
  if (this._autocompleteType === "list") {
    this._listboxWidget._activeDescendant.reset();
    if (this._inputEl.value.length === 0) {
      this.resetFilter();
    } else {
      _filterSuggestions(this._inputEl.value, this._listboxWidget.items);
    }
  }
}
function _onListboxClick(e) {
  const widget = this;
  const element = e.target.closest("[data-makeup-index]");
  const indexData = element.dataset.makeupIndex;
  if (indexData !== void 0) {
    this._inputEl.value = nodeListToArray(this._listboxWidget.items).filter((el) => !el.hidden)[indexData].innerText;
    if (this._options.autoSelect === false) {
      _dispatchChangeEvent(this._el, this._inputEl.value);
    }
    setTimeout(function() {
      widget._expander.expanded = false;
    }, this._options.collapseTimeout);
  }
}
function _onListboxActiveDescendantChange(e) {
  if (this._options.autoSelect === true) {
    this._inputEl.value = nodeListToArray(this._listboxWidget.items).filter((el) => !el.hidden)[e.detail.toIndex].innerText;
    _dispatchChangeEvent(this._el, this._inputEl.value);
  }
}
function mjs_onMutation(mutationsList) {
  for (const mutation of mutationsList) {
    if (mutation.type === "attributes") {
      this._el.dispatchEvent(new CustomEvent("makeup-combobox-mutation", {
        detail: {
          attributeName: mutation.attributeName
        }
      }));
    }
  }
}
function _filterSuggestions(value, items) {
  const numChars = value.length;
  const currentValue = value.toLowerCase();
  const matchedItems = nodeListToArray(items).filter((el) => {
    return el.innerText.trim().substring(0, numChars).toLowerCase() === currentValue;
  });
  const unmatchedItems = nodeListToArray(items).filter((el) => {
    return el.innerText.trim().substring(0, numChars).toLowerCase() !== currentValue;
  });
  matchedItems.forEach((el) => el.hidden = false);
  unmatchedItems.forEach((el) => el.hidden = true);
}
function _dispatchChangeEvent(el, value) {
  el.dispatchEvent(new CustomEvent("makeup-combobox-change", {
    detail: { value }
  }));
}



/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
!function() {
"use strict";


__webpack_require__(2859);

__webpack_require__(5638);

var _makeupCombobox = _interopRequireDefault(__webpack_require__(5107));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// REQUIRE
// const Combobox = require('../../packages/makeup-combobox').default;
// IMPORT
window.onload = function () {
  document.querySelectorAll('.combobox').forEach(function (el, i) {
    var widget = new _makeupCombobox.default(el, {
      autoSelect: el.dataset.makeupAutoSelect === 'false' ? false : true
    });
    el.addEventListener('makeup-combobox-change', function (e) {
      console.log(e.type, e.detail);
    });
    el.addEventListener('makeup-combobox-mutation', function (e) {
      console.log(e.type, e.detail);
    });
  });
};
}();
/******/ })()
;
//# sourceMappingURL=index.min.js.map