/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 2614:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ src_default; }
/* harmony export */ });
const defaultOptions = {
  labelElementAnimateModifier: "floating-label__label--animate",
  labelElementInlineModifier: "floating-label__label--inline",
  labelElementFocusModifier: "floating-label__label--focus",
  labelElementInvalidModifier: "floating-label__label--invalid",
  labelElementDisabledModifier: "floating-label__label--disabled",
  textboxElementBackgroundRGB: [
    "rgb(255, 255, 255)",
    "rgb(247, 247, 247)",
    "rgb(245, 245, 245)",
    "rgb(230, 32, 72)",
    "rgb(254, 245, 246)"
  ]
};
function getPlaceHolder(formControlEl) {
  if (isSelect(formControlEl)) {
    const firstOption = formControlEl.querySelector("option");
    return !firstOption.value ? firstOption.text : null;
  } else if (formControlEl.hasAttribute("placeholder")) {
    return formControlEl.getAttribute("placeholder");
  }
}
function setPlaceholder(formControlEl, value) {
  if (isSelect(formControlEl)) {
    formControlEl.style["min-width"] = "";
    const beforeWidth = formControlEl.offsetWidth;
    formControlEl.querySelector("option").text = value;
    if (!value && beforeWidth > formControlEl.offsetWidth) {
      formControlEl.style["min-width"] = `${beforeWidth}px`;
    }
  } else if (value) {
    formControlEl.setAttribute("placeholder", value);
  } else {
    formControlEl.removeAttribute("placeholder");
  }
}
function checkForPlaceholder(formControlEl) {
  if (isSelect(formControlEl)) {
    const firstOption = formControlEl.querySelector("option");
    if (!!firstOption.value) {
      return;
    }
    return !!firstOption.text;
  }
  return formControlEl.hasAttribute("placeholder");
}
function onMutation() {
  const textboxFocus = isFocused(this.formControlEl);
  this.placeholder = getPlaceHolder(this.formControlEl) || this.placeholder;
  const placeholderCheck = checkForPlaceholder(this.formControlEl, this.placeholder);
  if (!!this.placeholder && textboxFocus && !placeholderCheck) {
    setPlaceholder(this.formControlEl, this.placeholder);
  } else if (!textboxFocus && placeholderCheck) {
    setPlaceholder(this.formControlEl, "");
  }
  if (isInvalid(this.formControlEl)) {
    this.labelEl.classList.add(this.options.labelElementInvalidModifier);
  } else {
    this.labelEl.classList.remove(this.options.labelElementInvalidModifier);
  }
  if (isDisabled(this.formControlEl)) {
    this.labelEl.classList.add(this.options.labelElementDisabledModifier);
  } else {
    this.labelEl.classList.remove(this.options.labelElementDisabledModifier);
  }
}
function isFocused(formControlEl) {
  return document.activeElement === formControlEl;
}
function isSelect(formControlEl) {
  return formControlEl.tagName === "SELECT";
}
function hasValue(input) {
  return input.value.length > 0;
}
function isDisabled(input) {
  return input.hasAttribute("disabled");
}
function isInvalid(input) {
  return input.hasAttribute("aria-invalid") && input.getAttribute("aria-invalid") === "true";
}
function isAutofilled(input, color) {
  if (!isSelect(input)) {
    const bgColor = getComputedStyle(input).backgroundColor;
    return Array.isArray(color) ? !color.includes(bgColor) : bgColor !== color;
  }
  return false;
}
function _onBlur() {
  if (!hasValue(this.formControlEl)) {
    this.labelEl.classList.add(this.options.labelElementInlineModifier);
  }
  this.labelEl.classList.remove(this.options.labelElementFocusModifier);
  if (isInvalid(this.formControlEl)) {
    this.labelEl.classList.add(this.options.labelElementInvalidModifier);
  }
  setPlaceholder(this.formControlEl, "");
}
function _onFocus() {
  this.labelEl.classList.add(this.options.labelElementAnimateModifier);
  this.labelEl.classList.add(this.options.labelElementFocusModifier);
  this.labelEl.classList.remove(this.options.labelElementInlineModifier);
  this.labelEl.classList.remove(this.options.labelElementInvalidModifier);
  if (this.placeholder) {
    setPlaceholder(this.formControlEl, this.placeholder);
  }
}
class src_default {
  constructor(el, userOptions) {
    this.options = Object.assign({}, defaultOptions, userOptions);
    this._observer = new MutationObserver(onMutation.bind(this));
    this.rootEl = el;
    this.labelEl = this.rootEl.querySelector("label");
    this.formControlEl = this.rootEl.querySelector("input,textarea,select");
    this._onBlurListener = _onBlur.bind(this);
    this._onFocusListener = _onFocus.bind(this);
    this.formControlEl.addEventListener("blur", this._onBlurListener);
    this.formControlEl.addEventListener("focus", this._onFocusListener);
    if (!hasValue(this.formControlEl) && !isAutofilled(this.formControlEl, this.options.textboxElementBackgroundRGB)) {
      this.labelEl.classList.add(this.options.labelElementInlineModifier);
    } else if (!isSelect(this.formControlEl)) {
      this.labelEl.classList.remove(this.options.labelElementInlineModifier);
    }
    if (isFocused(this.formControlEl)) {
      this.labelEl.classList.add(this.options.labelElementFocusModifier);
      this.labelEl.classList.remove(this.options.labelElementInlineModifier);
    }
    onMutation.call(this);
    this._observer.observe(this.formControlEl, {
      childList: isSelect(this.formControlEl),
      subtree: isSelect(this.formControlEl),
      attributeFilter: ["disabled", "aria-invalid", "placeholder", "value"],
      attributes: true
    });
  }
  destroy() {
    this._observer.disconnect();
  }
  refresh() {
    if (hasValue(this.formControlEl) || isSelect(this.formControlEl) || isAutofilled(this.formControlEl, this.options.textboxElementBackgroundRGB)) {
      this.labelEl.classList.remove(this.options.labelElementInlineModifier);
    }
    if (isFocused(this.formControlEl)) {
      this.labelEl.classList.add(this.options.labelElementFocusModifier);
      this.labelEl.classList.remove(this.options.labelElementInlineModifier);
    }
  }
}



/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
!function() {


var _makeupFloatingLabel = _interopRequireDefault(__webpack_require__(2614));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// REQUIRE
// const FloatingLabel = require('../../packages/makeup-floating-label').default;
// IMPORT
document.addEventListener('DOMContentLoaded', function () {
  var widgetEls = document.querySelectorAll('.floating-label');
  var autofillBtn = document.getElementById('autofill');
  var refreshBtn = document.getElementById('refresh');
  var invalidateBtn = document.getElementById('invalidate');
  var validateBtn = document.getElementById('validate');
  var disableBtn = document.getElementById('disable');
  var enableBtn = document.getElementById('enable');
  var widgets = [];
  widgetEls.forEach(function (el) {
    widgets.push(new _makeupFloatingLabel.default(el));
  });
  autofillBtn.addEventListener('click', function () {
    widgetEls.forEach(function (el) {
      var input = el.querySelector('input');

      if (input) {
        input.value = 'Autofill Text';
      } else {
        el.querySelector('select').value = 'UK';
      }
    });
  });
  refreshBtn.addEventListener('click', function () {
    widgets.forEach(function (el, index) {
      widgets[index].refresh();
    });
  });
  invalidateBtn.addEventListener('click', function () {
    widgets.forEach(function (el, index) {
      widgets[index].formControlEl.setAttribute('aria-invalid', 'true');
    });
  });
  validateBtn.addEventListener('click', function () {
    widgets.forEach(function (el, index) {
      widgets[index].formControlEl.setAttribute('aria-invalid', 'false');
    });
  });
  disableBtn.addEventListener('click', function () {
    widgets.forEach(function (el, index) {
      widgets[index].formControlEl.disabled = true;
    });
  });
  enableBtn.addEventListener('click', function () {
    widgets.forEach(function (el, index) {
      widgets[index].formControlEl.disabled = false;
    });
  });
});
}();
/******/ })()
;
//# sourceMappingURL=index.min.js.map