/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 6068:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ src_default; }
/* harmony export */ });
const focusableElList = [
  "a[href]",
  "area[href]",
  "button:not([disabled])",
  "embed",
  "iframe",
  "input:not([disabled])",
  "object",
  "select:not([disabled])",
  "textarea:not([disabled])",
  "*[tabindex]",
  "*[contenteditable]"
];
const focusableElSelector = focusableElList.join();
function src_default(el, keyboardOnly = false, callback) {
  if (callback) {
    const request = requestAnimationFrame(() => {
      callback(getFocusables(el, keyboardOnly));
    });
    return () => {
      cancelAnimationFrame(request);
    };
  }
  return getFocusables(el, keyboardOnly);
}
function getFocusables(el, keyboardOnly = false) {
  let focusableEls = Array.prototype.slice.call(el.querySelectorAll(focusableElSelector));
  focusableEls = focusableEls.filter(function(focusableEl) {
    return window.getComputedStyle(focusableEl).display !== "none";
  });
  if (keyboardOnly === true) {
    focusableEls = focusableEls.filter(function(focusableEl) {
      return focusableEl.getAttribute("tabindex") !== "-1";
    });
  }
  return focusableEls;
}



/***/ }),

/***/ 1448:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "refresh": function() { return /* binding */ refresh; },
/* harmony export */   "trap": function() { return /* binding */ trap; },
/* harmony export */   "untrap": function() { return /* binding */ untrap; }
/* harmony export */ });
/* harmony import */ var makeup_focusables__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6068);

let trappedEl;
let topTrap;
let outerTrapBefore;
let innerTrapBefore;
let innerTrapAfter;
let outerTrapAfter;
let botTrap;
let firstFocusableElement;
let lastFocusableElement;
function createTrapBoundary() {
  const trapBoundary = document.createElement("div");
  trapBoundary.setAttribute("aria-hidden", "true");
  trapBoundary.setAttribute("tabindex", "0");
  trapBoundary.className = "keyboard-trap-boundary";
  return trapBoundary;
}
function setFocusToFirstFocusableElement() {
  firstFocusableElement.focus();
}
function setFocusToLastFocusableElement() {
  lastFocusableElement.focus();
}
function createTraps() {
  topTrap = createTrapBoundary();
  outerTrapBefore = topTrap.cloneNode();
  innerTrapBefore = topTrap.cloneNode();
  innerTrapAfter = topTrap.cloneNode();
  outerTrapAfter = topTrap.cloneNode();
  botTrap = topTrap.cloneNode();
  topTrap.addEventListener("focus", setFocusToFirstFocusableElement);
  outerTrapBefore.addEventListener("focus", setFocusToFirstFocusableElement);
  innerTrapBefore.addEventListener("focus", setFocusToLastFocusableElement);
  innerTrapAfter.addEventListener("focus", setFocusToFirstFocusableElement);
  outerTrapAfter.addEventListener("focus", setFocusToLastFocusableElement);
  botTrap.addEventListener("focus", setFocusToLastFocusableElement);
}
function untrap() {
  if (trappedEl) {
    topTrap = safeDetach(topTrap);
    outerTrapBefore = safeDetach(outerTrapBefore);
    innerTrapBefore = safeDetach(innerTrapBefore);
    innerTrapAfter = safeDetach(innerTrapAfter);
    outerTrapAfter = safeDetach(outerTrapAfter);
    botTrap = safeDetach(botTrap);
    trappedEl.classList.remove("keyboard-trap--active");
    trappedEl.dispatchEvent(new CustomEvent("keyboardUntrap", { bubbles: true }));
    trappedEl = null;
  }
  return trappedEl;
}
function safeDetach(el) {
  const parent = el.parentNode;
  return parent ? parent.removeChild(el) : el;
}
function trap(el) {
  if (!topTrap) {
    createTraps();
  } else {
    untrap();
  }
  trappedEl = el;
  const body = typeof document === "undefined" ? null : document.body;
  const focusableElements = (0,makeup_focusables__WEBPACK_IMPORTED_MODULE_0__["default"])(trappedEl, true);
  firstFocusableElement = focusableElements[0];
  lastFocusableElement = focusableElements[focusableElements.length - 1];
  body.insertBefore(topTrap, body.childNodes[0]);
  trappedEl.parentNode.insertBefore(outerTrapBefore, trappedEl);
  trappedEl.insertBefore(innerTrapBefore, trappedEl.childNodes[0]);
  trappedEl.appendChild(innerTrapAfter);
  trappedEl.parentNode.insertBefore(outerTrapAfter, trappedEl.nextElementSibling);
  body.appendChild(botTrap);
  trappedEl.dispatchEvent(new CustomEvent("keyboardTrap", { bubbles: true }));
  trappedEl.classList.add("keyboard-trap--active");
  return trappedEl;
}
function refresh() {
  if (topTrap && trappedEl) {
    let focusableElements = (0,makeup_focusables__WEBPACK_IMPORTED_MODULE_0__["default"])(trappedEl, true);
    focusableElements = focusableElements.filter(function(el) {
      return !el.classList.contains("keyboard-trap-boundary");
    });
    firstFocusableElement = focusableElements[0];
    lastFocusableElement = focusableElements[focusableElements.length - 1];
  }
}



/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
!function() {


var keyboardTrap = _interopRequireWildcard(__webpack_require__(1448));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// REQUIRE
// const keyboardTrap = require('../../packages/makeup-keyboard-trap');
// IMPORT
var trap = document.getElementById('trap');
var btn = document.querySelector('button');
btn.addEventListener('click', function () {
  if (this.getAttribute('aria-pressed') === 'true') {
    keyboardTrap.untrap();
  } else {
    keyboardTrap.trap(this.parentNode);
  }
});
document.addEventListener('keyboardTrap', function (e) {
  console.log(this, e);
});
document.addEventListener('keyboardUntrap', function (e) {
  console.log(this, e);
});
trap.addEventListener('keyboardUntrap', function (e) {
  console.log(this, e);
  btn.innerText = 'Trap';
  btn.setAttribute('aria-pressed', 'false');
});
trap.addEventListener('keyboardTrap', function (e) {
  console.log(this, e);
  btn.innerText = 'Untrap';
  btn.setAttribute('aria-pressed', 'true');
});
}();
/******/ })()
;
//# sourceMappingURL=index.min.js.map