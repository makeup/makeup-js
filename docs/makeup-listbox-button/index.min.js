/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 7704:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(858);


/***/ }),

/***/ 9461:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(8817);


/***/ }),

/***/ 5580:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(1248);


/***/ }),

/***/ 1367:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(8958);
__webpack_require__(9040);


/***/ }),

/***/ 8958:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(8282);


/***/ }),

/***/ 9040:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(1220);


/***/ }),

/***/ 2184:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(5250);


/***/ }),

/***/ 858:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ 8817:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ 1248:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ 8282:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ 1220:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ 5250:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ 2859:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ 6272:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "default": () => (/* binding */ makeup_listbox_button_dist_mjs_src_default)
});

;// CONCATENATED MODULE: ./packages/makeup-next-id/dist/mjs/index.js
const sequenceMap = {};
const defaultPrefix = "nid";
const randomPortion = createRandomPortion(3);
function randomNumber(max) {
  return Math.floor(Math.random() * max);
}
function createRandomPortion(size) {
  const letters = "abcdefghijklmnopqrstuvwxyz";
  const digits = "0123456789";
  const allChars = letters + digits;
  let portion = letters[randomNumber(25)];
  for (let i = 1; i < size; i++) {
    portion += allChars[randomNumber(35)];
  }
  return portion;
}
function mjs_src_default(el, prefix = defaultPrefix) {
  const separator = prefix === "" ? "" : "-";
  const key = `${prefix}${separator}${randomPortion}`;
  sequenceMap[key] = sequenceMap[key] || 0;
  if (!el.id) {
    el.setAttribute("id", `${key}-${sequenceMap[key]++}`);
  }
  return el.id;
}


;// CONCATENATED MODULE: ./packages/makeup-exit-emitter/dist/mjs/index.js

const focusExitEmitters = {};
function doFocusExit(el, fromElement, toElement) {
  el.dispatchEvent(
    new CustomEvent("focusExit", {
      detail: { fromElement, toElement },
      bubbles: false
      // mirror the native mouseleave event
    })
  );
}
function onDocumentFocusIn(e) {
  const newFocusElement = e.target;
  const targetIsDescendant = this.el.contains(newFocusElement);
  if (targetIsDescendant === true) {
    this.currentFocusElement = newFocusElement;
  } else {
    window.removeEventListener("blur", this.onWindowBlurListener);
    document.removeEventListener("focusin", this.onDocumentFocusInListener);
    doFocusExit(this.el, this.currentFocusElement, newFocusElement);
    this.currentFocusElement = null;
  }
}
function onWindowBlur() {
  doFocusExit(this.el, this.currentFocusElement, void 0);
}
function onWidgetFocusIn() {
  document.addEventListener("focusin", this.onDocumentFocusInListener);
  window.addEventListener("blur", this.onWindowBlurListener);
}
class FocusExitEmitter {
  constructor(el) {
    this.el = el;
    this.currentFocusElement = null;
    this.onWidgetFocusInListener = onWidgetFocusIn.bind(this);
    this.onDocumentFocusInListener = onDocumentFocusIn.bind(this);
    this.onWindowBlurListener = onWindowBlur.bind(this);
    this.el.addEventListener("focusin", this.onWidgetFocusInListener);
  }
  removeEventListeners() {
    window.removeEventListener("blur", this.onWindowBlurListener);
    document.removeEventListener("focusin", this.onDocumentFocusInListener);
    this.el.removeEventListener("focusin", this.onWidgetFocusInListener);
  }
}
function addFocusExit(el) {
  let exitEmitter = null;
  mjs_src_default(el);
  if (!focusExitEmitters[el.id]) {
    exitEmitter = new FocusExitEmitter(el);
    focusExitEmitters[el.id] = exitEmitter;
  }
  return exitEmitter;
}
function removeFocusExit(el) {
  const exitEmitter = focusExitEmitters[el.id];
  if (exitEmitter) {
    exitEmitter.removeEventListeners();
    delete focusExitEmitters[el.id];
  }
}


;// CONCATENATED MODULE: ./packages/makeup-focusables/dist/mjs/index.js
const focusableElList = [
  "a[href]",
  "area[href]",
  "button:not([disabled])",
  "embed",
  "iframe",
  "input:not([disabled])",
  "object",
  "select:not([disabled])",
  "textarea:not([disabled])",
  "*[tabindex]",
  "*[contenteditable]"
];
const focusableElSelector = focusableElList.join();
function src_default(el, keyboardOnly = false, callback) {
  if (callback) {
    const request = requestAnimationFrame(() => {
      callback(getFocusables(el, keyboardOnly));
    });
    return () => {
      cancelAnimationFrame(request);
    };
  }
  return getFocusables(el, keyboardOnly);
}
function getFocusables(el, keyboardOnly = false) {
  let focusableEls = Array.prototype.slice.call(el.querySelectorAll(focusableElSelector));
  focusableEls = focusableEls.filter(function(focusableEl) {
    return window.getComputedStyle(focusableEl).display !== "none";
  });
  if (keyboardOnly === true) {
    focusableEls = focusableEls.filter(function(focusableEl) {
      return focusableEl.getAttribute("tabindex") !== "-1";
    });
  }
  return focusableEls;
}


;// CONCATENATED MODULE: ./packages/makeup-expander/dist/mjs/index.js



const defaultOptions = {
  alwaysDoFocusManagement: false,
  ariaControls: true,
  autoCollapse: false,
  collapseOnFocusOut: false,
  collapseOnMouseOut: false,
  collapseOnClickOut: false,
  contentSelector: ".expander__content",
  expandedClass: null,
  expandOnClick: false,
  expandOnFocus: false,
  expandOnHover: false,
  focusManagement: null,
  hostSelector: ".expander__host",
  simulateSpacebarClick: false
};
function onHostKeyDown(e) {
  if (e.keyCode === 13 || e.keyCode === 32) {
    this._keyboardClickFlag = true;
  }
  if (e.keyCode === 32 && this.options.simulateSpacebarClick === true) {
    this.hostEl.click();
  }
}
function onHostMouseDown() {
  this._mouseClickFlag = true;
}
function onHostClick() {
  this._expandWasKeyboardClickActivated = this._keyboardClickFlag;
  this._expandWasMouseClickActivated = this._mouseClickFlag;
  this.expanded = !this.expanded;
}
function onHostFocus() {
  this._expandWasFocusActivated = true;
  this.expanded = true;
}
function onHostHover() {
  clearTimeout(this._mouseLeft);
  this._expandWasHoverActivated = true;
  this.expanded = true;
}
function onFocusExit() {
  this.expanded = false;
}
function onMouseLeave() {
  clearTimeout(this._mouseLeft);
  this._mouseLeft = setTimeout(() => {
    this.expanded = false;
  }, 300);
}
function _onDocumentClick(e) {
  if (this.el.contains(e.target) === false) {
    this.expanded = false;
  }
}
function _onDocumentTouchStart() {
  this.documentClick = true;
}
function _onDocumentTouchMove() {
  this.documentClick = false;
}
function _onDocumentTouchEnd(e) {
  if (this.documentClick === true) {
    this.documentClick = false;
    if (this.el.contains(e.target) === false) {
      this.expanded = false;
    }
  }
}
function manageFocus(focusManagement, contentEl) {
  if (focusManagement === "content") {
    contentEl.setAttribute("tabindex", "-1");
    contentEl.focus();
  } else if (focusManagement === "focusable") {
    src_default(contentEl)[0].focus();
  } else if (focusManagement === "interactive") {
    src_default(contentEl, true)[0].focus();
  } else if (focusManagement !== null) {
    const el = contentEl.querySelector(`#${focusManagement}`);
    if (el) {
      el.focus();
    }
  }
}
class dist_mjs_src_default {
  constructor(el, selectedOptions) {
    this.options = Object.assign({}, defaultOptions, selectedOptions);
    this.el = el;
    this.hostEl = el.querySelector(this.options.hostSelector);
    this.contentEl = el.querySelector(this.options.contentSelector);
    addFocusExit(this.el);
    this._hostKeyDownListener = onHostKeyDown.bind(this);
    this._hostMouseDownListener = onHostMouseDown.bind(this);
    this._documentClickListener = _onDocumentClick.bind(this);
    this._documentTouchStartListener = _onDocumentTouchStart.bind(this);
    this._documentTouchMoveListener = _onDocumentTouchMove.bind(this);
    this._documentTouchEndListener = _onDocumentTouchEnd.bind(this);
    this._hostClickListener = onHostClick.bind(this);
    this._hostFocusListener = onHostFocus.bind(this);
    this._hostHoverListener = onHostHover.bind(this);
    this._focusExitListener = onFocusExit.bind(this);
    this._mouseLeaveListener = onMouseLeave.bind(this);
    if (this.hostEl.getAttribute("aria-expanded") === null) {
      this.hostEl.setAttribute("aria-expanded", "false");
    }
    if (this.options.ariaControls === true) {
      mjs_src_default(this.el, "expander");
      this.contentEl.id = this.contentEl.id || `${this.el.id}-content`;
      this.hostEl.setAttribute("aria-controls", this.contentEl.id);
    }
    this.expandOnClick = this.options.expandOnClick;
    this.expandOnFocus = this.options.expandOnFocus;
    this.expandOnHover = this.options.expandOnHover;
    if (this.options.autoCollapse === false) {
      this.collapseOnClickOut = this.options.collapseOnClickOut;
      this.collapseOnFocusOut = this.options.collapseOnFocusOut;
      this.collapseOnMouseOut = this.options.collapseOnMouseOut;
    }
  }
  set expandOnClick(bool) {
    if (bool === true) {
      this.hostEl.addEventListener("keydown", this._hostKeyDownListener);
      this.hostEl.addEventListener("mousedown", this._hostMouseDownListener);
      this.hostEl.addEventListener("click", this._hostClickListener);
      if (this.options.autoCollapse === true) {
        this.collapseOnClickOut = true;
        this.collapseOnFocusOut = true;
      }
    } else {
      this.hostEl.removeEventListener("click", this._hostClickListener);
      this.hostEl.removeEventListener("mousedown", this._hostMouseDownListener);
      this.hostEl.removeEventListener("keydown", this._hostKeyDownListener);
    }
  }
  set expandOnFocus(bool) {
    if (bool === true) {
      this.hostEl.addEventListener("focus", this._hostFocusListener);
      if (this.options.autoCollapse === true) {
        this.collapseOnClickOut = true;
        this.collapseOnFocusOut = true;
      }
    } else {
      this.hostEl.removeEventListener("focus", this._hostFocusListener);
    }
  }
  set expandOnHover(bool) {
    if (bool === true) {
      this.hostEl.addEventListener("mouseenter", this._hostHoverListener);
      this.contentEl.addEventListener("mouseenter", this._hostHoverListener);
      if (this.options.autoCollapse === true) {
        this.collapseOnMouseOut = true;
      }
    } else {
      this.hostEl.removeEventListener("mouseenter", this._hostHoverListener);
      this.contentEl.removeEventListener("mouseenter", this._hostHoverListener);
    }
  }
  set collapseOnClickOut(bool) {
    if (bool === true) {
      document.addEventListener("click", this._documentClickListener);
      document.addEventListener("touchstart", this._documentTouchStartListener);
      document.addEventListener("touchmove", this._documentTouchMoveListener);
      document.addEventListener("touchend", this._documentTouchEndListener);
    } else {
      document.removeEventListener("click", this._documentClickListener);
      document.removeEventListener("touchstart", this._documentTouchStartListener);
      document.removeEventListener("touchmove", this._documentTouchMoveListener);
      document.removeEventListener("touchend", this._documentTouchEndListener);
    }
  }
  set collapseOnFocusOut(bool) {
    if (bool === true) {
      this.el.addEventListener("focusExit", this._focusExitListener);
    } else {
      this.el.removeEventListener("focusExit", this._focusExitListener);
    }
  }
  set collapseOnMouseOut(bool) {
    if (bool === true) {
      this.el.addEventListener("mouseleave", this._mouseLeaveListener);
      this.contentEl.addEventListener("mouseleave", this._mouseLeaveListener);
    } else {
      this.el.removeEventListener("mouseleave", this._mouseLeaveListener);
      this.contentEl.removeEventListener("mouseleave", this._mouseLeaveListener);
    }
  }
  get expanded() {
    return this.hostEl.getAttribute("aria-expanded") === "true";
  }
  set expanded(bool) {
    if (bool === true && this.expanded === false) {
      this.hostEl.setAttribute("aria-expanded", "true");
      if (this.options.expandedClass) {
        this.el.classList.add(this.options.expandedClass);
      }
      if (this._expandWasKeyboardClickActivated || this._expandWasMouseClickActivated && this.options.alwaysDoFocusManagement) {
        manageFocus(this.options.focusManagement, this.contentEl);
      }
      this.el.dispatchEvent(new CustomEvent("expander-expand", { bubbles: true, detail: this.contentEl }));
    }
    if (bool === false && this.expanded === true) {
      this.hostEl.setAttribute("aria-expanded", "false");
      if (this.options.expandedClass) {
        this.el.classList.remove(this.options.expandedClass);
      }
      this.el.dispatchEvent(new CustomEvent("expander-collapse", { bubbles: true, detail: this.contentEl }));
    }
    this._expandWasKeyboardClickActivated = false;
    this._expandWasMouseClickActivated = false;
    this._expandWasFocusActivated = false;
    this._expandWasHoverActivated = false;
    this._keyboardClickFlag = false;
    this._mouseClickFlag = false;
  }
  sleep() {
    if (this._destroyed !== true) {
      this.expandOnClick = false;
      this.expandOnFocus = false;
      this.expandOnHover = false;
      this.collapseOnClickOut = false;
      this.collapseOnFocusOut = false;
      this.collapseOnMouseOut = false;
    }
  }
  destroy() {
    this.sleep();
    this._destroyed = true;
    this._hostKeyDownListener = null;
    this._hostMouseDownListener = null;
    this._documentClickListener = null;
    this._documentTouchStartListener = null;
    this._documentTouchMoveListener = null;
    this._documentTouchEndListener = null;
    this._hostClickListener = null;
    this._hostFocusListener = null;
    this._hostHoverListener = null;
    this._focusExitListener = null;
    this._mouseLeaveListener = null;
  }
}


;// CONCATENATED MODULE: ./packages/makeup-key-emitter/dist/mjs/index.js
function uncapitalizeFirstLetter(str) {
  return str.charAt(0).toLowerCase() + str.slice(1);
}
function onKeyDownOrUp(evt, el, keyEventType) {
  if (!evt.shiftKey) {
    const key = evt.key;
    switch (key) {
      case "Enter":
      case "Escape":
      case "PageUp":
      case "PageDown":
      case "End":
      case "Home":
      case "ArrowLeft":
      case "ArrowUp":
      case "ArrowRight":
      case "ArrowDown":
        el.dispatchEvent(
          new CustomEvent(uncapitalizeFirstLetter(`${key}Key${keyEventType}`), {
            detail: evt,
            bubbles: true
          })
        );
        break;
      case " ":
        el.dispatchEvent(
          new CustomEvent(`spacebarKey${keyEventType}`, {
            detail: evt,
            bubbles: true
          })
        );
        break;
      default:
        return;
    }
  }
}
function onKeyDown(e) {
  onKeyDownOrUp(e, this, "Down");
}
function onKeyUp(e) {
  onKeyDownOrUp(e, this, "Up");
}
function addKeyDown(el) {
  el.addEventListener("keydown", onKeyDown);
}
function addKeyUp(el) {
  el.addEventListener("keyup", onKeyUp);
}
function removeKeyDown(el) {
  el.removeEventListener("keydown", onKeyDown);
}
function removeKeyUp(el) {
  el.removeEventListener("keyup", onKeyUp);
}
function add(el) {
  addKeyDown(el);
  addKeyUp(el);
}
function remove(el) {
  removeKeyDown(el);
  removeKeyUp(el);
}


;// CONCATENATED MODULE: ./packages/makeup-navigation-emitter/dist/mjs/index.js


const mjs_defaultOptions = {
  axis: "both",
  autoInit: "interactive",
  autoReset: "current",
  ignoreByDelegateSelector: null,
  wrap: false
};
function isItemNavigable(el) {
  return !el.hidden && el.getAttribute("aria-disabled") !== "true";
}
function isIndexNavigable(items, index) {
  return index >= 0 && index < items.length ? isItemNavigable(items[index]) : false;
}
function findNavigableItems(items) {
  return items.filter(isItemNavigable);
}
function findFirstNavigableIndex(items) {
  return items.findIndex((item) => isItemNavigable(item));
}
function findLastNavigableIndex(items) {
  return items.indexOf(findNavigableItems(items).reverse()[0]);
}
function findIndexByAttribute(items, attribute, value) {
  return items.findIndex((item) => isItemNavigable(item) && item.getAttribute(attribute) === value);
}
function findFirstNavigableAriaCheckedIndex(items) {
  return findIndexByAttribute(items, "aria-checked", "true");
}
function findFirstNavigableAriaSelectedIndex(items) {
  return findIndexByAttribute(items, "aria-selected", "true");
}
function findIgnoredByDelegateItems(el, options) {
  return options.ignoreByDelegateSelector !== null ? [...el.querySelectorAll(options.ignoreByDelegateSelector)] : [];
}
function findPreviousNavigableIndex(items, index, wrap) {
  let previousNavigableIndex = -1;
  if (index === null || atStart(items, index)) {
    if (wrap === true) {
      previousNavigableIndex = findLastNavigableIndex(items);
    }
  } else {
    let i = index;
    while (--i >= 0) {
      if (isItemNavigable(items[i])) {
        previousNavigableIndex = i;
        break;
      }
    }
  }
  return previousNavigableIndex;
}
function findNextNavigableIndex(items, index, wrap) {
  let nextNavigableIndex = -1;
  if (index === null) {
    nextNavigableIndex = findFirstNavigableIndex(items);
  } else if (atEnd(items, index)) {
    if (wrap === true) {
      nextNavigableIndex = findFirstNavigableIndex(items);
    }
  } else {
    let i = index;
    while (++i < items.length) {
      if (isItemNavigable(items[i])) {
        nextNavigableIndex = i;
        break;
      }
    }
  }
  return nextNavigableIndex;
}
function findIndexPositionByType(typeOrNum, items, currentIndex) {
  let index = -1;
  switch (typeOrNum) {
    case "none":
      index = null;
      break;
    case "current":
      index = currentIndex;
      break;
    case "interactive":
      index = findFirstNavigableIndex(items);
      break;
    case "ariaChecked":
      index = findFirstNavigableAriaCheckedIndex(items);
      break;
    case "ariaSelected":
      index = findFirstNavigableAriaSelectedIndex(items);
      break;
    case "ariaSelectedOrInteractive":
      index = findFirstNavigableAriaSelectedIndex(items);
      index = index === -1 ? findFirstNavigableIndex(items) : index;
      break;
    default:
      index = typeof typeOrNum === "number" || typeOrNum === null ? typeOrNum : -1;
  }
  return index;
}
function atStart(items, index) {
  return index === findFirstNavigableIndex(items);
}
function atEnd(items, index) {
  return index === findLastNavigableIndex(items);
}
function onKeyPrev(e) {
  const ignoredByDelegateItems = findIgnoredByDelegateItems(this._el, this.options);
  if (ignoredByDelegateItems.length === 0 || !ignoredByDelegateItems.includes(e.detail.target)) {
    this.index = findPreviousNavigableIndex(this.items, this.index, this.options.wrap);
  }
}
function onKeyNext(e) {
  const ignoredByDelegateItems = findIgnoredByDelegateItems(this._el, this.options);
  if (ignoredByDelegateItems.length === 0 || !ignoredByDelegateItems.includes(e.detail.target)) {
    this.index = findNextNavigableIndex(this.items, this.index, this.options.wrap);
  }
}
function onClick(e) {
  const itemIndex = this.indexOf(e.target.closest(this._itemSelector));
  if (isIndexNavigable(this.items, itemIndex)) {
    this.index = itemIndex;
  }
}
function onKeyHome(e) {
  const ignoredByDelegateItems = findIgnoredByDelegateItems(this._el, this.options);
  if (ignoredByDelegateItems.length === 0 || !ignoredByDelegateItems.includes(e.detail.target)) {
    this.index = findFirstNavigableIndex(this.items);
  }
}
function onKeyEnd(e) {
  const ignoredByDelegateItems = findIgnoredByDelegateItems(this._el, this.options);
  if (ignoredByDelegateItems.length === 0 || !ignoredByDelegateItems.includes(e.detail.target)) {
    this.index = findLastNavigableIndex(this.items);
  }
}
function mjs_onFocusExit() {
  if (this.options.autoReset !== null) {
    this.reset();
  }
}
function onMutation(e) {
  const fromIndex = this.index;
  let toIndex = this.index;
  const { addedNodes, attributeName, removedNodes, target, type } = e[0];
  if (type === "attributes") {
    if (target === this.currentItem) {
      if (attributeName === "aria-disabled") {
        toIndex = this.index;
      } else if (attributeName === "hidden") {
        toIndex = findFirstNavigableIndex(this.items);
      }
    } else {
      toIndex = this.index;
    }
  } else if (type === "childList") {
    if (removedNodes.length > 0 && [...removedNodes].includes(this._cachedElement)) {
      toIndex = findFirstNavigableIndex(this.items);
    } else if (removedNodes.length > 0 || addedNodes.length > 0) {
      toIndex = this.indexOf(this._cachedElement);
    }
  }
  this._index = toIndex;
  this._el.dispatchEvent(
    new CustomEvent("navigationModelMutation", {
      bubbles: false,
      detail: { fromIndex, toIndex }
    })
  );
}
class NavigationModel {
  /**
   * @param {HTMLElement} el
   * @param {string} itemSelector
   * @param {typeof defaultOptions} selectedOptions
   */
  constructor(el, itemSelector, selectedOptions) {
    this.options = Object.assign({}, mjs_defaultOptions, selectedOptions);
    this._el = el;
    this._itemSelector = itemSelector;
  }
}
class LinearNavigationModel extends NavigationModel {
  /**
   * @param {HTMLElement} el
   * @param {string} itemSelector
   * @param {typeof defaultOptions} selectedOptions
   */
  constructor(el, itemSelector, selectedOptions) {
    super(el, itemSelector, selectedOptions);
    const fromIndex = this._index;
    const toIndex = findIndexPositionByType(this.options.autoInit, this.items, this.index);
    this._index = toIndex;
    this._cachedElement = this.items[toIndex];
    this._el.dispatchEvent(
      new CustomEvent("navigationModelInit", {
        bubbles: false,
        detail: {
          firstInteractiveIndex: this.firstNavigableIndex,
          fromIndex,
          items: this.items,
          toIndex
        }
      })
    );
  }
  get currentItem() {
    return this.items[this.index];
  }
  // todo: code smell as getter abstracts that the query selector re-runs every time getter is accessed
  get items() {
    return [...this._el.querySelectorAll(`${this._itemSelector}`)];
  }
  get index() {
    return this._index;
  }
  /**
   * @param {number} toIndex - update index position in this.items (non-interactive indexes fail silently)
   */
  set index(toIndex) {
    if (toIndex === this.index) {
      return;
    } else if (!isIndexNavigable(this.items, toIndex)) {
    } else {
      const fromIndex = this.index;
      this._cachedElement = this.items[toIndex];
      this._index = toIndex;
      this._el.dispatchEvent(
        new CustomEvent("navigationModelChange", {
          bubbles: false,
          detail: { fromIndex, toIndex }
        })
      );
    }
  }
  indexOf(element) {
    return this.items.indexOf(element);
  }
  reset() {
    const fromIndex = this.index;
    const toIndex = findIndexPositionByType(this.options.autoReset, this.items, this.index);
    if (toIndex !== fromIndex) {
      this._index = toIndex;
      this._el.dispatchEvent(
        new CustomEvent("navigationModelReset", {
          bubbles: false,
          detail: { fromIndex, toIndex }
        })
      );
    }
  }
}
class NavigationEmitter {
  /**
   * @param {HTMLElement} el
   * @param {LinearNavigationModel} model
   */
  constructor(el, model) {
    this.model = model;
    this.el = el;
    this._keyPrevListener = onKeyPrev.bind(model);
    this._keyNextListener = onKeyNext.bind(model);
    this._keyHomeListener = onKeyHome.bind(model);
    this._keyEndListener = onKeyEnd.bind(model);
    this._clickListener = onClick.bind(model);
    this._focusExitListener = mjs_onFocusExit.bind(model);
    this._observer = new MutationObserver(onMutation.bind(model));
    addKeyDown(this.el);
    addFocusExit(this.el);
    const axis = model.options.axis;
    if (axis === "both" || axis === "x") {
      this.el.addEventListener("arrowLeftKeyDown", this._keyPrevListener);
      this.el.addEventListener("arrowRightKeyDown", this._keyNextListener);
    }
    if (axis === "both" || axis === "y") {
      this.el.addEventListener("arrowUpKeyDown", this._keyPrevListener);
      this.el.addEventListener("arrowDownKeyDown", this._keyNextListener);
    }
    this.el.addEventListener("homeKeyDown", this._keyHomeListener);
    this.el.addEventListener("endKeyDown", this._keyEndListener);
    this.el.addEventListener("click", this._clickListener);
    this.el.addEventListener("focusExit", this._focusExitListener);
    this._observer.observe(this.el, {
      childList: true,
      subtree: true,
      attributeFilter: ["aria-disabled", "hidden"],
      attributes: true,
      attributeOldValue: true
    });
  }
  destroy() {
    removeKeyDown(this.el);
    removeFocusExit(this.el);
    this.el.removeEventListener("arrowLeftKeyDown", this._keyPrevListener);
    this.el.removeEventListener("arrowRightKeyDown", this._keyNextListener);
    this.el.removeEventListener("arrowUpKeyDown", this._keyPrevListener);
    this.el.removeEventListener("arrowDownKeyDown", this._keyNextListener);
    this.el.removeEventListener("homeKeyDown", this._keyHomeListener);
    this.el.removeEventListener("endKeyDown", this._keyEndListener);
    this.el.removeEventListener("click", this._clickListener);
    this.el.removeEventListener("focusExit", this._focusExitListener);
    this._observer.disconnect();
  }
}
function createLinear(el, itemSelector, selectedOptions) {
  const model = new LinearNavigationModel(el, itemSelector, selectedOptions);
  return new NavigationEmitter(el, model);
}


;// CONCATENATED MODULE: ./packages/makeup-active-descendant/dist/mjs/index.js


const dist_mjs_defaultOptions = {
  activeDescendantClassName: "active-descendant",
  autoInit: "none",
  autoReset: "none",
  autoScroll: false,
  axis: "both",
  wrap: false
};
function onModelInit(e) {
  const { items, toIndex } = e.detail;
  const itemEl = items[toIndex];
  if (itemEl) {
    itemEl.classList.add(this._options.activeDescendantClassName);
    this._focusEl.setAttribute("aria-activedescendant", itemEl.id);
  }
  this._el.dispatchEvent(new CustomEvent("activeDescendantInit", { detail: e.detail }));
}
function onModelChange(e) {
  const { fromIndex, toIndex } = e.detail;
  const fromItem = this.items[fromIndex];
  const toItem = this.items[toIndex];
  if (fromItem) {
    fromItem.classList.remove(this._options.activeDescendantClassName);
  }
  if (toItem) {
    toItem.classList.add(this._options.activeDescendantClassName);
    this._focusEl.setAttribute("aria-activedescendant", toItem.id);
    if (this._options.autoScroll && this._containerEl) {
      this._containerEl.scrollTop = toItem.offsetTop - this._containerEl.offsetHeight / 2;
    }
  }
  this._el.dispatchEvent(new CustomEvent("activeDescendantChange", { detail: e.detail }));
}
function onModelReset(e) {
  const toIndex = e.detail.toIndex;
  const activeClassName = this._options.activeDescendantClassName;
  this.items.forEach(function(el) {
    el.classList.remove(activeClassName);
  });
  if (toIndex !== null && toIndex !== -1) {
    const itemEl = this.items[toIndex];
    itemEl.classList.add(activeClassName);
    this._focusEl.setAttribute("aria-activedescendant", itemEl.id);
  } else {
    this._focusEl.removeAttribute("aria-activedescendant");
  }
  this._el.dispatchEvent(new CustomEvent("activeDescendantReset", { detail: e.detail }));
}
function onModelMutation(e) {
  const { toIndex } = e.detail;
  const activeDescendantClassName = this._options.activeDescendantClassName;
  this.items.forEach(function(item, index) {
    mjs_src_default(item);
    if (index !== toIndex) {
      item.classList.remove(activeDescendantClassName);
    } else {
      item.classList.add(activeDescendantClassName);
    }
  });
  this._el.dispatchEvent(new CustomEvent("activeDescendantMutation", { detail: e.detail }));
}
class ActiveDescendant {
  constructor(el) {
    this._el = el;
    this._onMutationListener = onModelMutation.bind(this);
    this._onChangeListener = onModelChange.bind(this);
    this._onResetListener = onModelReset.bind(this);
    this._onInitListener = onModelInit.bind(this);
    this._el.addEventListener("navigationModelMutation", this._onMutationListener);
    this._el.addEventListener("navigationModelChange", this._onChangeListener);
    this._el.addEventListener("navigationModelReset", this._onResetListener);
    this._el.addEventListener("navigationModelInit", this._onInitListener);
  }
  destroy() {
    this._el.removeEventListener("navigationModelMutation", this._onMutationListener);
    this._el.removeEventListener("navigationModelChange", this._onChangeListener);
    this._el.removeEventListener("navigationModelReset", this._onResetListener);
    this._el.removeEventListener("navigationModelInit", this._onInitListener);
  }
}
class LinearActiveDescendant extends ActiveDescendant {
  constructor(el, focusEl, itemContainerEl, itemSelector, selectedOptions) {
    super(el);
    this._options = Object.assign({}, dist_mjs_defaultOptions, selectedOptions);
    this._focusEl = focusEl;
    this._itemContainerEl = itemContainerEl;
    this._itemSelector = itemSelector;
    mjs_src_default(this._itemContainerEl);
    if (this._itemContainerEl !== this._focusEl) {
      focusEl.setAttribute("aria-owns", this._itemContainerEl.id);
    }
    this._navigationEmitter = createLinear(el, itemSelector, {
      autoInit: this._options.autoInit,
      autoReset: this._options.autoReset,
      axis: this._options.axis,
      ignoreByDelegateSelector: this._options.ignoreByDelegateSelector,
      wrap: this._options.wrap
    });
    this.items.forEach(function(itemEl) {
      mjs_src_default(itemEl);
    });
  }
  get index() {
    return this._navigationEmitter.model.index;
  }
  set index(newIndex) {
    this._navigationEmitter.model.index = newIndex;
  }
  reset() {
    this._navigationEmitter.model.reset();
  }
  get currentItem() {
    return this._navigationEmitter.model.currentItem;
  }
  get items() {
    return this._navigationEmitter.model.items;
  }
  set wrap(newWrap) {
    this._navigationEmitter.model.options.wrap = newWrap;
  }
  destroy() {
    super.destroy();
    this._navigationEmitter.destroy();
  }
}
function mjs_createLinear(el, focusEl, itemContainerEl, itemSelector, selectedOptions) {
  return new LinearActiveDescendant(el, focusEl, itemContainerEl, itemSelector, selectedOptions);
}


;// CONCATENATED MODULE: ./packages/makeup-prevent-scroll-keys/dist/mjs/index.js
function mjs_onKeyDown(e) {
  if (e.keyCode >= 32 && e.keyCode <= 40) {
    e.preventDefault();
  }
}
function mjs_add(el) {
  el.addEventListener("keydown", mjs_onKeyDown);
}
function mjs_remove(el) {
  el.removeEventListener("keydown", mjs_onKeyDown);
}


;// CONCATENATED MODULE: ./packages/makeup-listbox/dist/mjs/index.js


const makeup_listbox_dist_mjs_defaultOptions = {
  activeDescendantClassName: "listbox__option--active",
  // the classname applied to the current active desdcendant
  autoInit: "ariaSelectedOrInteractive",
  autoReset: "ariaSelectedOrInteractive",
  autoSelect: true,
  // when true, aria-checked state matches active-descendant
  customElementMode: false,
  focusableElement: null,
  // used in a combobox/datepicker scenario
  listboxOwnerElement: null,
  // used in a combobox/datepicker scenario
  multiSelect: false,
  // todo
  useAriaChecked: true,
  // doubles up on support for aria-selected to announce visible selected/checked state
  valueSelector: ".listbox__value"
  // Selector to get value from
};
function isSpacebarOrEnter(keyCode) {
  return keyCode === 13 || keyCode === 32;
}
class makeup_listbox_dist_mjs_src_default {
  constructor(widgetEl, selectedOptions) {
    this._options = Object.assign({}, makeup_listbox_dist_mjs_defaultOptions, selectedOptions);
    this.el = widgetEl;
    this._activeDescendantRootEl = this._options.listboxOwnerElement || this.el;
    if (widgetEl.getAttribute("role") === "listbox") {
      this._listboxEl = widgetEl;
    } else {
      this._listboxEl = this.el.querySelector("[role=listbox]");
    }
    if (!this._options.focusableElement && this._listboxEl.getAttribute("tabindex") === null) {
      this._listboxEl.setAttribute("tabindex", "0");
    }
    mjs_add(this.el);
    this._onKeyDownListener = _onKeyDown.bind(this);
    this._onClickListener = _onClick.bind(this);
    this._onActiveDescendantChangeListener = _onActiveDescendantChange.bind(this);
    this._onMutationListener = _onMutation.bind(this);
    this.el.classList.add("listbox--js");
    if (!this._options.customElementMode) {
      this._mutationObserver = new MutationObserver(this._onMutationListener);
      this._observeMutations();
      this._observeEvents();
    }
    this._activeDescendant = mjs_createLinear(
      this._activeDescendantRootEl,
      this._options.focusableElement || this._listboxEl,
      this._listboxEl,
      "[role=option]",
      {
        activeDescendantClassName: this._options.activeDescendantClassName,
        autoInit: this._options.autoInit,
        autoReset: this._options.autoReset,
        axis: "y"
      }
    );
  }
  _observeMutations() {
    if (!this._options.customElementMode) {
      this._mutationObserver.observe(this._listboxEl, {
        attributeFilter: ["aria-selected"],
        attributes: true,
        childList: true,
        subtree: true
      });
    }
  }
  _unobserveMutations() {
    if (!this._options.customElementMode) {
      this._mutationObserver.disconnect();
    }
  }
  _observeEvents() {
    if (this._destroyed !== true) {
      this._activeDescendantRootEl.addEventListener("activeDescendantChange", this._onActiveDescendantChangeListener);
      this._listboxEl.addEventListener("keydown", this._onKeyDownListener);
      this._listboxEl.addEventListener("click", this._onClickListener);
    }
  }
  _unobserveEvents() {
    this._listboxEl.removeEventListener("keydown", this._onKeyDownListener);
    this._listboxEl.removeEventListener("click", this._onClickListener);
    this._activeDescendantRootEl.removeEventListener("activeDescendantChange", this._onActiveDescendantChangeListener);
  }
  get index() {
    return this.items.findIndex((el) => el.getAttribute("aria-selected") === "true");
  }
  get items() {
    return this._activeDescendant.items;
  }
  select(index) {
    this._unobserveMutations();
    const itemEl = this.items[index];
    if (itemEl && itemEl.getAttribute("aria-disabled") !== "true") {
      const matchingItem = this.items[index];
      let optionValue;
      matchingItem.setAttribute("aria-selected", "true");
      if (this._options.useAriaChecked === true) {
        matchingItem.setAttribute("aria-checked", "true");
      }
      optionValue = matchingItem.innerText;
      if (this._options.valueSelector) {
        const valueSelector = matchingItem.querySelector(this._options.valueSelector);
        if (valueSelector) {
          optionValue = valueSelector.innerText;
        }
      }
      this.el.dispatchEvent(
        new CustomEvent("makeup-listbox-change", {
          detail: {
            optionIndex: index,
            optionValue
          }
        })
      );
    }
    this._observeMutations();
  }
  unselect(index) {
    this._unobserveMutations();
    const itemEl = this.items[index];
    if (itemEl && itemEl.getAttribute("aria-disabled") !== "true") {
      const matchingItem = this.items[index];
      matchingItem.setAttribute("aria-selected", "false");
      if (this._options.useAriaChecked === true) {
        matchingItem.setAttribute("aria-checked", "false");
      }
    }
    this._observeMutations();
  }
  destroy() {
    this._destroyed = true;
    this._unobserveMutations();
    this._unobserveEvents();
    this._onKeyDownListener = null;
    this._onClickListener = null;
    this._onActiveDescendantChangeListener = null;
    this._onMutationListener = null;
  }
}
function _onKeyDown(e) {
  const activeDescendantEl = this._activeDescendant.currentItem;
  if (isSpacebarOrEnter(e.keyCode) && activeDescendantEl?.getAttribute("aria-selected") !== "true") {
    this.unselect(this.index);
    this.select(this._activeDescendant.index);
  }
}
function _onClick(e) {
  const toEl = e.target.closest("[role=option]");
  const toElIndex = this.items.indexOf(toEl);
  const isTolElSelected = toEl.getAttribute("aria-selected") === "true";
  const isTolElDisabled = toEl.getAttribute("aria-disabled") === "true";
  if (!isTolElDisabled && this._options.autoSelect === false && isTolElSelected === false) {
    this.unselect(this.index);
    this.select(toElIndex);
  }
}
function _onActiveDescendantChange(e) {
  const { fromIndex, toIndex } = e.detail;
  if (this._options.autoSelect === true) {
    const fromEl = this.items[fromIndex];
    const toEl = this.items[toIndex];
    if (fromEl) {
      this.unselect(fromIndex);
    }
    if (toEl) {
      this.select(toIndex);
    }
  }
}
function _onMutation(mutationsList) {
  for (const mutation of mutationsList) {
    if (mutation.type === "attributes") {
      this.el.dispatchEvent(
        new CustomEvent("makeup-listbox-mutation", {
          detail: {
            attributeName: mutation.attributeName
          }
        })
      );
    }
  }
}


;// CONCATENATED MODULE: ./packages/makeup-listbox-button/dist/mjs/index.js


const makeup_listbox_button_dist_mjs_defaultOptions = {
  autoSelect: true,
  buttonLabelSelector: ".btn__text",
  collapseTimeout: 150,
  customElementMode: false,
  listboxSelector: ".listbox-button__listbox",
  floatingLabelSelector: ".btn__floating-label",
  floatingLabelInline: "btn__floating-label--inline",
  floatingLabelAnimate: "btn__floating-label--animate",
  valueSelector: ".listbox-button__value"
};
class makeup_listbox_button_dist_mjs_src_default {
  constructor(widgetEl, selectedOptions) {
    this._options = Object.assign({}, makeup_listbox_button_dist_mjs_defaultOptions, selectedOptions);
    this.el = widgetEl;
    this._buttonEl = this.el.querySelector("button");
    this._buttonLabelEl = widgetEl.querySelector(this._options.buttonLabelSelector);
    this._buttonFloatingLabelEl = widgetEl.querySelector(this._options.floatingLabelSelector);
    this._buttonPrefix = this._buttonEl.dataset?.listboxButtonPrefix;
    this._listboxEl = this.el.querySelector(this._options.listboxSelector);
    this._onButtonFirstClickListener = _onButtonFirstClick.bind(this);
    this._onListboxClickListener = _onListboxClick.bind(this);
    this._onListboxKeyDownListener = _onListboxKeyDown.bind(this);
    this._onListboxInitListener = _onListboxInit.bind(this);
    this._onListboxChangeListener = _onListboxChange.bind(this);
    this._onMutationListener = mjs_onMutation.bind(this);
    if (!this._options.customElementMode) {
      this._mutationObserver = new MutationObserver(this._onMutationListener);
      this._observeMutations();
      this._observeEvents();
    }
    this.listbox = new makeup_listbox_dist_mjs_src_default(this._listboxEl, {
      activeDescendantClassName: "listbox-button__option--active",
      autoReset: "ariaSelectedOrInteractive",
      autoSelect: this._options.autoSelect,
      valueSelector: this._options.valueSelector
    });
    this._expander = new dist_mjs_src_default(this.el, {
      alwaysDoFocusManagement: true,
      collapseOnClick: true,
      collapseOnClickOut: true,
      collapseOnFocusOut: true,
      contentSelector: this._options.listboxSelector,
      expandedClass: "listbox-button--expanded",
      expandOnClick: true,
      focusManagement: "focusable",
      hostSelector: "button"
    });
    this.el.classList.add("listbox-button--js");
    if (this._buttonFloatingLabelEl) {
      if (!this._buttonLabelEl.innerText) {
        this._buttonFloatingLabelEl.classList.add(this._options.floatingLabelInline);
      }
    }
  }
  _observeMutations() {
    if (!this._options.customElementMode) {
      this._mutationObserver.observe(this._buttonEl, {
        attributeFilter: ["aria-expanded"],
        attributes: true,
        childList: false,
        subtree: false
      });
    }
  }
  _unobserveMutations() {
    if (!this._options.customElementMode) {
      this._mutationObserver.disconnect();
    }
  }
  _unobserveEvents() {
    this._buttonEl.removeEventListener("click", this._onButtonFirstClickListener);
    this._listboxEl.removeEventListener("click", this._onListboxClickListener);
    this._listboxEl.removeEventListener("keydown", this._onListboxKeyDownListener);
    this._listboxEl.removeEventListener("makeup-listbox-init", this._onListboxInitListener);
    this._listboxEl.removeEventListener("makeup-listbox-change", this._onListboxChangeListener);
  }
  _observeEvents() {
    if (this._destroyed !== true) {
      this._buttonEl.addEventListener("click", this._onButtonFirstClickListener, { once: true });
      this._listboxEl.addEventListener("click", this._onListboxClickListener);
      this._listboxEl.addEventListener("keydown", this._onListboxKeyDownListener);
      this._listboxEl.addEventListener("makeup-listbox-init", this._onListboxInitListener);
      this._listboxEl.addEventListener("makeup-listbox-change", this._onListboxChangeListener);
    }
  }
  collapse() {
    const widget = this;
    setTimeout(function() {
      widget._unobserveMutations();
      widget._expander.expanded = false;
      widget._observeMutations();
      widget._buttonEl.focus();
    }, this._options.collapseTimeout);
  }
  destroy() {
    this._destroyed = true;
    this._unobserveEvents();
    this._unobserveMutations();
    this._onButtonFirstClickListener = null;
    this._onListboxClickListener = null;
    this._onListboxKeyDownListener = null;
    this._onListboxInitListener = null;
    this._onListboxChangeListener = null;
    this._onMutationListener = null;
  }
}
function _onButtonFirstClick() {
  this.listbox.el.hidden = false;
}
function _onListboxKeyDown(e) {
  if (e.keyCode === 13 || e.keyCode === 27 || e.keyCode === 32) {
    this.collapse();
  }
}
function _onListboxClick() {
  this.collapse();
}
function _onListboxInit(e) {
  this.el.dispatchEvent(new CustomEvent("makeup-listbox-button-init", { detail: e.detail }));
}
function _onListboxChange(e) {
  const toValue = e.detail.optionValue;
  if (this._buttonPrefix) {
    this._buttonLabelEl.innerText = this._buttonPrefix + toValue;
  } else {
    this._buttonLabelEl.innerText = toValue;
  }
  if (this._buttonFloatingLabelEl) {
    if (toValue) {
      this._buttonFloatingLabelEl.classList.add(this._options.floatingLabelAnimate);
      this._buttonFloatingLabelEl.classList.remove(this._options.floatingLabelInline);
    } else {
      this._buttonFloatingLabelEl.classList.add(this._options.floatingLabelInline);
    }
  }
  this.el.dispatchEvent(new CustomEvent("makeup-listbox-button-change", { detail: e.detail }));
}
function mjs_onMutation(mutationsList) {
  for (const mutation of mutationsList) {
    if (mutation.type === "attributes") {
      this.el.dispatchEvent(
        new CustomEvent("makeup-listbox-button-mutation", {
          detail: {
            attributeName: mutation.attributeName
          }
        })
      );
    }
  }
}



/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";


__webpack_require__(2859);
__webpack_require__(1367);
__webpack_require__(9461);
__webpack_require__(2184);
__webpack_require__(7704);
__webpack_require__(5580);
var _makeupListboxButton = _interopRequireDefault(__webpack_require__(6272));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// REQUIRE
// const ListboxButton = require('../../packages/makeup-listbox-button').default;
// IMPORT
const widgets = [];
const log = e => console.log(e.type, e.detail);
window.onload = function () {
  document.querySelectorAll(".listbox-button").forEach(function (el, i) {
    el.addEventListener("makeup-listbox-button-init", log);
    el.addEventListener("makeup-listbox-button-change", log);
    el.addEventListener("makeup-listbox-button-mutation", log);
    widgets.push(new _makeupListboxButton.default(el, {
      autoSelect: el.dataset.makeupAutoSelect === "false" ? false : true
    }));
  });
};
})();

/******/ })()
;
//# sourceMappingURL=index.min.js.map