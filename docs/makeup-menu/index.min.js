/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 682:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(9807);


/***/ }),

/***/ 2859:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ 9807:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ 6541:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addFocusExit": () => (/* binding */ addFocusExit),
/* harmony export */   "removeFocusExit": () => (/* binding */ removeFocusExit)
/* harmony export */ });
/* harmony import */ var makeup_next_id__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5065);

const focusExitEmitters = {};
function doFocusExit(el, fromElement, toElement) {
  el.dispatchEvent(new CustomEvent("focusExit", {
    detail: { fromElement, toElement },
    bubbles: false
  }));
}
function onDocumentFocusIn(e) {
  const newFocusElement = e.target;
  const targetIsDescendant = this.el.contains(newFocusElement);
  if (targetIsDescendant === true) {
    this.currentFocusElement = newFocusElement;
  } else {
    window.removeEventListener("blur", this.onWindowBlurListener);
    document.removeEventListener("focusin", this.onDocumentFocusInListener);
    doFocusExit(this.el, this.currentFocusElement, newFocusElement);
    this.currentFocusElement = null;
  }
}
function onWindowBlur() {
  doFocusExit(this.el, this.currentFocusElement, void 0);
}
function onWidgetFocusIn() {
  document.addEventListener("focusin", this.onDocumentFocusInListener);
  window.addEventListener("blur", this.onWindowBlurListener);
}
class FocusExitEmitter {
  constructor(el) {
    this.el = el;
    this.currentFocusElement = null;
    this.onWidgetFocusInListener = onWidgetFocusIn.bind(this);
    this.onDocumentFocusInListener = onDocumentFocusIn.bind(this);
    this.onWindowBlurListener = onWindowBlur.bind(this);
    this.el.addEventListener("focusin", this.onWidgetFocusInListener);
  }
  removeEventListeners() {
    window.removeEventListener("blur", this.onWindowBlurListener);
    document.removeEventListener("focusin", this.onDocumentFocusInListener);
    this.el.removeEventListener("focusin", this.onWidgetFocusInListener);
  }
}
function addFocusExit(el) {
  let exitEmitter = null;
  (0,makeup_next_id__WEBPACK_IMPORTED_MODULE_0__["default"])(el);
  if (!focusExitEmitters[el.id]) {
    exitEmitter = new FocusExitEmitter(el);
    focusExitEmitters[el.id] = exitEmitter;
  }
  return exitEmitter;
}
function removeFocusExit(el) {
  const exitEmitter = focusExitEmitters[el.id];
  if (exitEmitter) {
    exitEmitter.removeEventListeners();
    delete focusExitEmitters[el.id];
  }
}



/***/ }),

/***/ 5413:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addKeyDown": () => (/* binding */ addKeyDown),
/* harmony export */   "removeKeyDown": () => (/* binding */ removeKeyDown)
/* harmony export */ });
/* unused harmony exports add, addKeyUp, remove, removeKeyUp */
function uncapitalizeFirstLetter(str) {
  return str.charAt(0).toLowerCase() + str.slice(1);
}
function onKeyDownOrUp(evt, el, keyEventType) {
  if (!evt.shiftKey) {
    const key = evt.key;
    switch (key) {
      case "Enter":
      case "Escape":
      case "PageUp":
      case "PageDown":
      case "End":
      case "Home":
      case "ArrowLeft":
      case "ArrowUp":
      case "ArrowRight":
      case "ArrowDown":
        el.dispatchEvent(new CustomEvent(uncapitalizeFirstLetter(`${key}Key${keyEventType}`), {
          detail: evt,
          bubbles: true
        }));
        break;
      case " ":
        el.dispatchEvent(new CustomEvent(`spacebarKey${keyEventType}`, {
          detail: evt,
          bubbles: true
        }));
        break;
      default:
        return;
    }
  }
}
function onKeyDown(e) {
  onKeyDownOrUp(e, this, "Down");
}
function onKeyUp(e) {
  onKeyDownOrUp(e, this, "Up");
}
function addKeyDown(el) {
  el.addEventListener("keydown", onKeyDown);
}
function addKeyUp(el) {
  el.addEventListener("keyup", onKeyUp);
}
function removeKeyDown(el) {
  el.removeEventListener("keydown", onKeyDown);
}
function removeKeyUp(el) {
  el.removeEventListener("keyup", onKeyUp);
}
function add(el) {
  addKeyDown(el);
  addKeyUp(el);
}
function remove(el) {
  removeKeyDown(el);
  removeKeyUp(el);
}



/***/ }),

/***/ 5736:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ src_default)
/* harmony export */ });
/* harmony import */ var makeup_roving_tabindex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3762);
/* harmony import */ var makeup_prevent_scroll_keys__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2681);


const defaultOptions = {
  customElementMode: false,
  autoInit: "interactive",
  autoReset: "interactive"
};
class src_default {
  constructor(widgetEl, selectedOptions) {
    this._options = Object.assign({}, defaultOptions, selectedOptions);
    this.el = widgetEl;
    this._rovingTabIndex = makeup_roving_tabindex__WEBPACK_IMPORTED_MODULE_0__.createLinear(this.el, "[role^=menuitem]", {
      autoInit: this._options.autoInit,
      autoReset: this._options.autoReset
    });
    makeup_prevent_scroll_keys__WEBPACK_IMPORTED_MODULE_1__.add(this.el);
    this._onKeyDownListener = _onKeyDown.bind(this);
    this._onClickListener = _onClick.bind(this);
    this._onMutationListener = _onMutation.bind(this);
    this.el.classList.add("menu--js");
    if (!this._options.customElementMode) {
      this._mutationObserver = new MutationObserver(this._onMutationListener);
      this._observeMutations();
      this._observeEvents();
    }
  }
  select(index) {
    this._unobserveMutations();
    const el = this.items[index];
    switch (el.getAttribute("role")) {
      case "menuitemcheckbox":
        _selectMenuItemCheckbox(this.el, el);
        break;
      case "menuitemradio":
        _selectMenuItemRadio(this.el, el);
        break;
      default:
        _selectMenuItem(this.el, el);
        break;
    }
    this._observeMutations();
  }
  get items() {
    return this._rovingTabIndex.items;
  }
  get radioGroupNames() {
    const els = [...this.el.querySelectorAll("[role=menuitemradio][data-makeup-group]")];
    const groupNames = [...new Set(els.map((el) => el.dataset.makeupGroup))];
    return groupNames;
  }
  get checkboxGroupNames() {
    const els = [...this.el.querySelectorAll("[role=menuitemcheckbox][data-makeup-group]")];
    const groupNames = [...new Set(els.map((el) => el.dataset.makeupGroup))];
    return groupNames;
  }
  _observeMutations() {
    if (!this._options.customElementMode) {
      this._mutationObserver.observe(this.el, {
        attributeFilter: ["aria-checked", "aria-disabled"],
        attributes: true,
        childList: true,
        subtree: true
      });
    }
  }
  _unobserveMutations() {
    if (!this._options.customElementMode) {
      this._mutationObserver.disconnect();
    }
  }
  _observeEvents() {
    if (this._destroyed !== true) {
      this.el.addEventListener("keydown", this._onKeyDownListener);
      this.el.addEventListener("click", this._onClickListener);
    }
  }
  _unobserveEvents() {
    this.el.removeEventListener("keydown", this._onKeyDownListener);
    this.el.removeEventListener("click", this._onClickListener);
  }
  destroy() {
    this._destroyed = true;
    this._unobserveMutations();
    this._unobserveEvents();
    this._onKeyDownListener = null;
    this._onClickListener = null;
    this._onMutationListener = null;
  }
}
function _onMutation(mutationsList) {
  for (const mutation of mutationsList) {
    if (mutation.type === "attributes") {
      this.el.dispatchEvent(new CustomEvent("makeup-menu-mutation", {
        detail: {
          attributeName: mutation.attributeName
        }
      }));
    }
  }
}
function _onKeyDown(e) {
  this._unobserveMutations();
  if (e.keyCode === 13) {
    e.preventDefault();
  }
  if (e.keyCode === 13 || e.keyCode === 32) {
    this.select(Array.from(this.items).indexOf(e.target));
  }
  this._observeMutations();
}
function _onClick(e) {
  const menuItemEl = e.target.closest("[role^=menuitem]");
  const index = this.items.indexOf(menuItemEl);
  if (index !== -1) {
    this.select(index);
  }
}
function _selectMenuItem(widgetEl, menuItemEl) {
  widgetEl.dispatchEvent(new CustomEvent("makeup-menu-select", {
    detail: {
      el: menuItemEl,
      value: menuItemEl.innerText
    }
  }));
}
function _selectMenuItemCheckbox(widgetEl, menuItemEl) {
  if (menuItemEl.getAttribute("aria-disabled") !== "true") {
    const groupName = menuItemEl.dataset.makeupGroup;
    menuItemEl.setAttribute(
      "aria-checked",
      menuItemEl.getAttribute("aria-checked") === "true" ? "false" : "true"
    );
    widgetEl.dispatchEvent(new CustomEvent("makeup-menu-change", {
      detail: {
        el: menuItemEl,
        checked: menuItemEl.getAttribute("aria-checked"),
        group: groupName,
        value: menuItemEl.innerText
      }
    }));
  }
}
function _selectMenuItemRadio(widgetEl, menuItemEl) {
  if (menuItemEl.getAttribute("aria-disabled") !== "true") {
    const groupName = menuItemEl.dataset.makeupGroup;
    const checkedEl = widgetEl.querySelector(`[data-makeup-group=${groupName}][aria-checked=true]`);
    if (checkedEl) {
      checkedEl.setAttribute("aria-checked", "false");
    }
    if (checkedEl !== menuItemEl) {
      menuItemEl.setAttribute("aria-checked", "true");
      widgetEl.dispatchEvent(new CustomEvent("makeup-menu-change", {
        detail: {
          el: menuItemEl,
          group: groupName,
          value: menuItemEl.innerText
        }
      }));
    }
  }
}



/***/ }),

/***/ 1390:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createLinear": () => (/* binding */ createLinear)
/* harmony export */ });
/* harmony import */ var makeup_key_emitter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5413);
/* harmony import */ var makeup_exit_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6541);


const defaultOptions = {
  axis: "both",
  autoInit: "interactive",
  autoReset: "current",
  ignoreByDelegateSelector: null,
  wrap: false
};
function isItemNavigable(el) {
  return !el.hidden && el.getAttribute("aria-disabled") !== "true";
}
function isIndexNavigable(items, index) {
  return index >= 0 && index < items.length ? isItemNavigable(items[index]) : false;
}
function findNavigableItems(items) {
  return items.filter(isItemNavigable);
}
function findFirstNavigableIndex(items) {
  return items.findIndex((item) => isItemNavigable(item));
}
function findLastNavigableIndex(items) {
  return items.indexOf(findNavigableItems(items).reverse()[0]);
}
function findIndexByAttribute(items, attribute, value) {
  return items.findIndex((item) => isItemNavigable(item) && item.getAttribute(attribute) === value);
}
function findFirstNavigableAriaCheckedIndex(items) {
  return findIndexByAttribute(items, "aria-checked", "true");
}
function findFirstNavigableAriaSelectedIndex(items) {
  return findIndexByAttribute(items, "aria-selected", "true");
}
function findIgnoredByDelegateItems(el, options) {
  return options.ignoreByDelegateSelector !== null ? [...el.querySelectorAll(options.ignoreByDelegateSelector)] : [];
}
function findPreviousNavigableIndex(items, index, wrap) {
  let previousNavigableIndex = -1;
  if (index === null) {
  } else if (atStart(items, index)) {
    if (wrap === true) {
      previousNavigableIndex = findLastNavigableIndex(items);
    }
  } else {
    let i = index;
    while (--i >= 0) {
      if (isItemNavigable(items[i])) {
        previousNavigableIndex = i;
        break;
      }
    }
  }
  return previousNavigableIndex;
}
function findNextNavigableIndex(items, index, wrap) {
  let nextNavigableIndex = -1;
  if (index === null) {
    nextNavigableIndex = findFirstNavigableIndex(items);
  } else if (atEnd(items, index)) {
    if (wrap === true) {
      nextNavigableIndex = findFirstNavigableIndex(items);
    }
  } else {
    let i = index;
    while (++i < items.length) {
      if (isItemNavigable(items[i])) {
        nextNavigableIndex = i;
        break;
      }
    }
  }
  return nextNavigableIndex;
}
function findIndexPositionByType(typeOrNum, items, currentIndex) {
  let index = -1;
  switch (typeOrNum) {
    case "none":
      index = null;
      break;
    case "current":
      index = currentIndex;
      break;
    case "interactive":
      index = findFirstNavigableIndex(items);
      break;
    case "ariaChecked":
      index = findFirstNavigableAriaCheckedIndex(items);
      break;
    case "ariaSelected":
      index = findFirstNavigableAriaSelectedIndex(items);
      break;
    case "ariaSelectedOrInteractive":
      index = findFirstNavigableAriaSelectedIndex(items);
      index = index === -1 ? findFirstNavigableIndex(items) : index;
      break;
    default:
      index = typeof typeOrNum === "number" || typeOrNum === null ? typeOrNum : -1;
  }
  return index;
}
function atStart(items, index) {
  return index === findFirstNavigableIndex(items);
}
function atEnd(items, index) {
  return index === findLastNavigableIndex(items);
}
function onKeyPrev(e) {
  const ignoredByDelegateItems = findIgnoredByDelegateItems(this._el, this.options);
  if (ignoredByDelegateItems.length === 0 || !ignoredByDelegateItems.includes(e.detail.target)) {
    this.index = findPreviousNavigableIndex(this.items, this.index, this.options.wrap);
  }
}
function onKeyNext(e) {
  const ignoredByDelegateItems = findIgnoredByDelegateItems(this._el, this.options);
  if (ignoredByDelegateItems.length === 0 || !ignoredByDelegateItems.includes(e.detail.target)) {
    this.index = findNextNavigableIndex(this.items, this.index, this.options.wrap);
  }
}
function onClick(e) {
  const itemIndex = this.indexOf(e.target.closest(this._itemSelector));
  if (isIndexNavigable(this.items, itemIndex)) {
    this.index = itemIndex;
  }
}
function onKeyHome(e) {
  const ignoredByDelegateItems = findIgnoredByDelegateItems(this._el, this.options);
  if (ignoredByDelegateItems.length === 0 || !ignoredByDelegateItems.includes(e.detail.target)) {
    this.index = findFirstNavigableIndex(this.items);
  }
}
function onKeyEnd(e) {
  const ignoredByDelegateItems = findIgnoredByDelegateItems(this._el, this.options);
  if (ignoredByDelegateItems.length === 0 || !ignoredByDelegateItems.includes(e.detail.target)) {
    this.index = findLastNavigableIndex(this.items);
  }
}
function onFocusExit() {
  if (this.options.autoReset !== null) {
    this.reset();
  }
}
function onMutation(e) {
  const fromIndex = this.index;
  let toIndex = this.index;
  const { addedNodes, attributeName, removedNodes, target, type } = e[0];
  if (type === "attributes") {
    if (target === this.currentItem) {
      if (attributeName === "aria-disabled") {
        toIndex = this.index;
      } else if (attributeName === "hidden") {
        toIndex = findFirstNavigableIndex(this.items);
      }
    } else {
      toIndex = this.index;
    }
  } else if (type === "childList") {
    if (removedNodes.length > 0 && [...removedNodes].includes(this._cachedElement)) {
      toIndex = findFirstNavigableIndex(this.items);
    } else if (removedNodes.length > 0 || addedNodes.length > 0) {
      toIndex = this.indexOf(this._cachedElement);
    }
  }
  this._index = toIndex;
  this._el.dispatchEvent(new CustomEvent("navigationModelMutation", {
    bubbles: false,
    detail: { fromIndex, toIndex }
  }));
}
class NavigationModel {
  constructor(el, itemSelector, selectedOptions) {
    this.options = Object.assign({}, defaultOptions, selectedOptions);
    this._el = el;
    this._itemSelector = itemSelector;
  }
}
class LinearNavigationModel extends NavigationModel {
  constructor(el, itemSelector, selectedOptions) {
    super(el, itemSelector, selectedOptions);
    const fromIndex = this._index;
    const toIndex = findIndexPositionByType(this.options.autoInit, this.items, this.index);
    this._index = toIndex;
    this._cachedElement = this.items[toIndex];
    this._el.dispatchEvent(new CustomEvent("navigationModelInit", {
      bubbles: false,
      detail: {
        firstInteractiveIndex: this.firstNavigableIndex,
        fromIndex,
        items: this.items,
        toIndex
      }
    }));
  }
  get currentItem() {
    return this.items[this.index];
  }
  get items() {
    return [...this._el.querySelectorAll(`${this._itemSelector}`)];
  }
  get index() {
    return this._index;
  }
  set index(toIndex) {
    if (toIndex === this.index) {
      return;
    } else if (!isIndexNavigable(this.items, toIndex)) {
    } else {
      const fromIndex = this.index;
      this._cachedElement = this.items[toIndex];
      this._index = toIndex;
      this._el.dispatchEvent(new CustomEvent("navigationModelChange", {
        bubbles: false,
        detail: { fromIndex, toIndex }
      }));
    }
  }
  indexOf(element) {
    return this.items.indexOf(element);
  }
  reset() {
    const fromIndex = this.index;
    const toIndex = findIndexPositionByType(this.options.autoReset, this.items, this.index);
    if (toIndex !== fromIndex) {
      this._index = toIndex;
      this._el.dispatchEvent(new CustomEvent("navigationModelReset", {
        bubbles: false,
        detail: { fromIndex, toIndex }
      }));
    }
  }
}
class NavigationEmitter {
  constructor(el, model) {
    this.model = model;
    this.el = el;
    this._keyPrevListener = onKeyPrev.bind(model);
    this._keyNextListener = onKeyNext.bind(model);
    this._keyHomeListener = onKeyHome.bind(model);
    this._keyEndListener = onKeyEnd.bind(model);
    this._clickListener = onClick.bind(model);
    this._focusExitListener = onFocusExit.bind(model);
    this._observer = new MutationObserver(onMutation.bind(model));
    makeup_key_emitter__WEBPACK_IMPORTED_MODULE_1__.addKeyDown(this.el);
    makeup_exit_emitter__WEBPACK_IMPORTED_MODULE_0__.addFocusExit(this.el);
    const axis = model.options.axis;
    if (axis === "both" || axis === "x") {
      this.el.addEventListener("arrowLeftKeyDown", this._keyPrevListener);
      this.el.addEventListener("arrowRightKeyDown", this._keyNextListener);
    }
    if (axis === "both" || axis === "y") {
      this.el.addEventListener("arrowUpKeyDown", this._keyPrevListener);
      this.el.addEventListener("arrowDownKeyDown", this._keyNextListener);
    }
    this.el.addEventListener("homeKeyDown", this._keyHomeListener);
    this.el.addEventListener("endKeyDown", this._keyEndListener);
    this.el.addEventListener("click", this._clickListener);
    this.el.addEventListener("focusExit", this._focusExitListener);
    this._observer.observe(this.el, {
      childList: true,
      subtree: true,
      attributeFilter: ["aria-disabled", "hidden"],
      attributes: true,
      attributeOldValue: true
    });
  }
  destroy() {
    makeup_key_emitter__WEBPACK_IMPORTED_MODULE_1__.removeKeyDown(this.el);
    makeup_exit_emitter__WEBPACK_IMPORTED_MODULE_0__.removeFocusExit(this.el);
    this.el.removeEventListener("arrowLeftKeyDown", this._keyPrevListener);
    this.el.removeEventListener("arrowRightKeyDown", this._keyNextListener);
    this.el.removeEventListener("arrowUpKeyDown", this._keyPrevListener);
    this.el.removeEventListener("arrowDownKeyDown", this._keyNextListener);
    this.el.removeEventListener("homeKeyDown", this._keyHomeListener);
    this.el.removeEventListener("endKeyDown", this._keyEndListener);
    this.el.removeEventListener("click", this._clickListener);
    this.el.removeEventListener("focusExit", this._focusExitListener);
    this._observer.disconnect();
  }
}
function createLinear(el, itemSelector, selectedOptions) {
  const model = new LinearNavigationModel(el, itemSelector, selectedOptions);
  return new NavigationEmitter(el, model);
}



/***/ }),

/***/ 5065:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ src_default)
/* harmony export */ });
const sequenceMap = {};
const defaultPrefix = "nid";
const randomPortion = createRandomPortion(3);
function randomNumber(max) {
  return Math.floor(Math.random() * max);
}
function createRandomPortion(size) {
  const letters = "abcdefghijklmnopqrstuvwxyz";
  const digits = "0123456789";
  const allChars = letters + digits;
  let portion = letters[randomNumber(25)];
  for (let i = 1; i < size; i++) {
    portion += allChars[randomNumber(35)];
  }
  return portion;
}
function src_default(el, prefix = defaultPrefix) {
  const separator = prefix === "" ? "" : "-";
  const key = `${prefix}${separator}${randomPortion}`;
  sequenceMap[key] = sequenceMap[key] || 0;
  if (!el.id) {
    el.setAttribute("id", `${key}-${sequenceMap[key]++}`);
  }
  return el.id;
}



/***/ }),

/***/ 2681:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "add": () => (/* binding */ add)
/* harmony export */ });
/* unused harmony export remove */
function onKeyDown(e) {
  if (e.keyCode >= 32 && e.keyCode <= 40) {
    e.preventDefault();
  }
}
function add(el) {
  el.addEventListener("keydown", onKeyDown);
}
function remove(el) {
  el.removeEventListener("keydown", onKeyDown);
}



/***/ }),

/***/ 3762:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createLinear": () => (/* binding */ createLinear)
/* harmony export */ });
/* harmony import */ var makeup_navigation_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1390);

const defaultOptions = {
  autoInit: "interactive",
  autoReset: "current",
  wrap: false,
  axis: "both"
};
function refreshTabindex(items, focusIndex) {
  items.forEach(function(el, i) {
    el.setAttribute("tabindex", i === focusIndex ? "0" : "-1");
  });
}
function onModelInit(e) {
  refreshTabindex(e.detail.items, e.detail.toIndex);
  this._el.dispatchEvent(new CustomEvent("rovingTabindexInit", { detail: e.detail }));
}
function onModelChange(e) {
  const items = this.items;
  const fromItem = items[e.detail.fromIndex];
  const toItem = items[e.detail.toIndex];
  if (fromItem) {
    fromItem.setAttribute("tabindex", "-1");
  }
  if (toItem) {
    toItem.setAttribute("tabindex", "0");
    toItem.focus();
  }
  this._el.dispatchEvent(new CustomEvent("rovingTabindexChange", { detail: e.detail }));
}
function onModelReset(e) {
  refreshTabindex(this.items, e.detail.toIndex);
  this._el.dispatchEvent(new CustomEvent("rovingTabindexReset", { detail: e.detail }));
}
function onModelMutation(e) {
  refreshTabindex(this.items, e.detail.toIndex);
  this._el.dispatchEvent(new CustomEvent("rovingTabindexMutation", { detail: e.detail }));
}
class RovingTabindex {
  constructor(el) {
    this._el = el;
    this._onMutationListener = onModelMutation.bind(this);
    this._onChangeListener = onModelChange.bind(this);
    this._onInitListener = onModelInit.bind(this);
    this._onResetListener = onModelReset.bind(this);
    this._el.addEventListener("navigationModelMutation", this._onMutationListener);
    this._el.addEventListener("navigationModelChange", this._onChangeListener);
    this._el.addEventListener("navigationModelInit", this._onInitListener);
    this._el.addEventListener("navigationModelReset", this._onResetListener);
  }
  destroy() {
    this._el.removeEventListener("navigationModelMutation", this._onMutationListener);
    this._el.removeEventListener("navigationModelChange", this._onChangeListener);
    this._el.removeEventListener("navigationModelInit", this._onInitListener);
    this._el.removeEventListener("navigationModelReset", this._onResetListener);
  }
}
class LinearRovingTabindex extends RovingTabindex {
  constructor(el, itemSelector, selectedOptions) {
    super(el);
    this._options = Object.assign({}, defaultOptions, selectedOptions);
    this._itemSelector = itemSelector;
    this._navigationEmitter = makeup_navigation_emitter__WEBPACK_IMPORTED_MODULE_0__.createLinear(el, itemSelector, {
      autoInit: this._options.index !== void 0 ? this._options.index : this._options.autoInit,
      autoReset: this._options.autoReset,
      wrap: this._options.wrap,
      axis: this._options.axis
    });
  }
  get index() {
    return this._navigationEmitter.model.index;
  }
  set index(newIndex) {
    this._navigationEmitter.model.index = newIndex;
  }
  set wrap(newWrap) {
    this._navigationEmitter.model.options.wrap = newWrap;
  }
  get currentItem() {
    return this._navigationEmitter.model.currentItem;
  }
  get items() {
    return this._navigationEmitter.model.items;
  }
  reset() {
    this._navigationEmitter.model.reset();
  }
  destroy() {
    super.destroy();
    this._navigationEmitter.destroy();
  }
}
function createLinear(el, itemSelector, selectedOptions) {
  return new LinearRovingTabindex(el, itemSelector, selectedOptions);
}



/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";


__webpack_require__(2859);
__webpack_require__(682);
var _makeupMenu = _interopRequireDefault(__webpack_require__(5736));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// REQUIRE
// const Menu = require('../../packages/makeup-menu').default;

// IMPORT

var log = e => console.log(e.type, e.detail);
window.onload = function () {
  document.querySelectorAll('.menu').forEach(function (el, i) {
    var widget = new _makeupMenu.default(el);
    el.addEventListener('makeup-menu-select', log);
    el.addEventListener('makeup-menu-change', log);
    el.addEventListener('makeup-menu-mutation', log);
  });
};
})();

/******/ })()
;
//# sourceMappingURL=index.min.js.map